from collections import defaultdict
import numpy as np
import time
import requests
import json
from datetime import datetime, timedelta
import os
import pandas as pd
import gspread


# –í—ã–≥—Ä—É–∑–∫–∞ –∏–∑ –∞—É—Ä—É–º –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ö
def query_idkt(hdrs, cabinet):
    url_cards = "https://content-api.wildberries.ru/content/v2/get/cards/list"
    DELAY = 0.7
    all_cards, cursor = [], None

    while True:
        headers = {"Authorization": hdrs}

        payload = {
            "settings": {
                "sort": {"ascending": False},
                "filter": {"withPhoto": -1},
                "cursor": {"limit": 100},
                "period": {
                    'begin': '2024-01-01',
                    'end': datetime.now().strftime("%Y-%m-%d")
                },
            },
        }

        if cursor:
            payload['settings']['cursor'].update(cursor)

        response = requests.post(url_cards, headers=headers, json=[payload])
        print(
            f'–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ content/v2/get/cards/list:\n {response}, {cabinet}')

        if response.status_code != 200:
            print(f"–û—à–∏–±–∫–∞: {response.status_code}")
            print(response.text)
            break

        data = response.json()

        if 'cards' not in data or 'cursor' not in data:
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:")
            print(json.dumps(data, indent=4, ensure_ascii=False))
            break

        for card in data['cards']:
            if isinstance(card, dict):
                all_cards.append({
                    key: val for key, val in card.items()
                    if key not in ['description']
                })

        if not data or 'cards' not in data or len(data['cards']) < 100:
            break

        cursor = {
            "updatedAt": data['cursor']['updatedAt'],
            "nmID": data['cursor']['nmID']
        }
        time.sleep(DELAY)

        print(
            f"–¥–ª–∏–Ω–∞ all_cards {len(all_cards)}\n–°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ {cabinet} –≤—ã–≥—Ä—É–∂–µ–Ω")

    if all_cards:
        return pd.DataFrame([{'–ê—Ä—Ç–∏–∫—É–ª WB': card['nmID'], 'ID': card['imtID']} for card in all_cards])


def campaing_query(hdrs, status, cabinet, IDKT):
    url_adverts = "https://advert-api.wildberries.ru/adv/v1/promotion/adverts"
    url_fullstats = "https://advert-api.wildberries.ru/adv/v2/fullstats"

    camp_data = []

    date_from = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')

    date_to = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')

    headers = {'Authorization': hdrs}

    payload = {
        'status': status
    }

    adverts = requests.post(url_adverts, headers=headers, params=payload)
    print(f"{cabinet} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {url_adverts}\n{adverts}")
    if adverts.status_code == 204:
        print(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö (204) –¥–ª—è {cabinet}, —Å—Ç–∞—Ç—É—Å {status}")
        return pd.DataFrame()

    if adverts.status_code == 200:
        print(f"–°—Ç–∞—Ç—É—Å adverts {adverts}")
        camp = adverts.json()

        print(f"id –†–ö:{[c['advertId'] for c in camp]}")

        params = [{'id': c['advertId'], 'interval': {
            'begin': date_from, 'end': date_to}} for c in camp]

    fullstats = requests.post(url_fullstats, headers=headers, json=params)

    if fullstats.status_code == 200:
        print(f"–°—Ç–∞—Ç—É—Å  {fullstats}")
        full_stats = fullstats.json()

        if full_stats != None:

            for c in full_stats:
                for d in c['days']:
                    for a in d['apps']:
                        for nm in a['nm']:
                            nm['appType'] = a['appType']
                            nm['date'] = d['date']
                            nm['advertId'] = c['advertId']
                            camp_data.append(nm)

            camp_df = pd.DataFrame(camp_data)

            camp_df['date'] = pd.to_datetime(camp_df['date']).dt.date

            camp_df['week'] = pd.to_datetime(
                camp_df['date']).dt.isocalendar().week

            camp_df['status'] = status

            camp_df['–ö–∞–±–∏–Ω–µ—Ç'] = cabinet

            camp_df = camp_df.rename(columns={
                'sum': 'expenses'
            })
            camp_df = camp_df.drop(columns=['date'])

            group_df = camp_df.groupby([
                'nmId', 'name', '–ö–∞–±–∏–Ω–µ—Ç', 'status', 'week'
            ]).agg({
                'views': 'sum',
                'clicks': 'sum',
                'atbs': 'sum',
                'orders': 'sum',
                'shks': 'sum',
                'sum_price': 'sum',
                'expenses': 'sum'

            }).reset_index()

            group_df = group_df.rename(columns={

                'nmId': '–ê—Ä—Ç–∏–∫—É–ª WB',
                'name': '–ü—Ä–µ–¥–º–µ—Ç',
                'status': '–°—Ç–∞—Ç—É—Å –†–ö',
                'week': '–ù–µ–¥–µ–ª—è',
                'views': '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã',
                'clicks': '–ü–µ—Ä–µ—Ö–æ–¥—ã',
                'atbs': '–î–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É',
                'orders': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤',
                'shks': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤',
                'sum_price': '–°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤',
                'expenses': '–†–∞—Å—Ö–æ–¥,–†',

            })

            group_df['CTR'] = np.where(
                group_df['–ü—Ä–æ—Å–º–æ—Ç—Ä—ã'] == 0,
                0,
                (
                    group_df['–ü–µ—Ä–µ—Ö–æ–¥—ã'] / group_df['–ü—Ä–æ—Å–º–æ—Ç—Ä—ã'] * 100
                ).round(2)
            )

            group_df['CR'] = np.where(
                group_df['–ü–µ—Ä–µ—Ö–æ–¥—ã'] == 0,
                0,
                (
                    group_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤'] / group_df['–ü–µ—Ä–µ—Ö–æ–¥—ã'] * 100
                ).round(2)
            )

            group_df['CPC'] = np.where(
                group_df['–ü–µ—Ä–µ—Ö–æ–¥—ã'] == 0,
                0,
                (
                    group_df['–†–∞—Å—Ö–æ–¥,–†'] / group_df['–ü–µ—Ä–µ—Ö–æ–¥—ã']
                ).round(2)
            )
            group_df = group_df.drop(columns=[
                'appType'
            ], errors='ignore')

            result = pd.merge(
                left=group_df,
                right=IDKT,
                left_on='–ê—Ä—Ç–∏–∫—É–ª WB',
                right_on='–ê—Ä—Ç–∏–∫—É–ª WB',
                how='left',
                suffixes=('_Au', '_id'),


            )

            num_col = [
                '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–ü–µ—Ä–µ—Ö–æ–¥—ã', '–î–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤',
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤', '–°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤', '–†–∞—Å—Ö–æ–¥,–†', 'CTR', 'CR', 'CPC'

            ]

            result = result.reindex(
                columns=['ID'] + result.columns.drop(['ID']).tolist())

            result['–ê—Ä—Ç–∏–∫—É–ª WB'] = result['–ê—Ä—Ç–∏–∫—É–ª WB'].astype(int)

            result['ID'] = result['ID'].astype(int)

            result['–ü—Ä–µ–¥–º–µ—Ç'] = result['–ü—Ä–µ–¥–º–µ—Ç'].replace('', '-').fillna('-')

            for col in num_col:
                result[col] = result[col].fillna(0)

            print(f'‚úÖ –ö–∞–º–ø–∞–Ω–∏—è {status} {cabinet} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!')

            result = result.filter([
                'ID', '–ù–µ–¥–µ–ª—è', '–†–∞—Å—Ö–æ–¥,–†'
            ])

            print(result.head(10))
            return result

        else:
            print(
                f"–û—à–∏–±–∫–∞ –∫–∞–±–∏–Ω–µ—Ç–∞ {cabinet} —Å—Ç–∞—Ç—É—Å {status} res {print(adverts)}")


def save_to_gh(dict_data):
    GROUP_MAP = {
        '–§–∏–Ω –º–æ–¥–µ–ª—å –ò–æ—Å–∏—Ñ–æ–≤—ã –† –ê –ú': ['–ê–∑–∞—Ä—å—è', '–†–∞—Ö–µ–ª—å', '–ú–∏—Ö–∞–∏–ª'],
        '–§–∏–Ω –º–æ–¥–µ–ª—å –ì–∞–ª–∏–ª–æ–≤–∞': ['–ì–∞–ª–∏–ª–æ–≤–∞'],
        '–§–∏–Ω –º–æ–¥–µ–ª—å –ú–∞—Ä—Ç—ã–Ω–µ–Ω–∫–æ –∏ –¢–æ—Ä–≥–º–∞–∫—Å–∏–º—É–º': ['–ú–∞—Ä—Ç—ã–Ω–µ–Ω–∫–æ', '–¢–æ—Ä–≥–º–∞–∫—Å–∏–º—É–º']
    }

    def goup_by_sheet(data, MAP):
        result = defaultdict(pd.DataFrame)

        for name, df in data.items():
            for sheet, people in MAP.items():
                if name in people:
                    result[sheet] = pd.concat(
                        [result[sheet], df], ignore_index=True)

        print('üéâ –î–∞–Ω–Ω—ã–µ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã!')
        return result

    def update_sheet(sheet_df, sheet_name='API WB –†–ö'):
        gs = gspread.service_account(
            filename=r'key.json')

        for name, df in sheet_df.items():
            sh = gs.open(name)
            worksheet = sh.worksheet(sheet_name)

            worksheet.update(
                range_name=f"A{len(worksheet.get_all_values())+1}",
                values=df.values.tolist()
            )
        print('‚úÖ –¥–∞–Ω–Ω—ã–µ –≤—ã–≥—Ä—É–∂–µ–Ω—ã –≤ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—É!')

    grouped = goup_by_sheet(dict_data, MAP=GROUP_MAP)
    update_sheet(grouped)


if __name__ == '__main__':

    campaing_data = {}

    begin = time.time()
    all_iosifovy = {
        '–ê–∑–∞—Ä—å—è': os.getenv('Azarya').strip(),
        '–ú–∏—Ö–∞–∏–ª': os.getenv('Michael').strip(),
        '–†–∞—Ö–µ–ª—å': os.getenv('Rachel').strip(),
        '–ì–∞–ª–∏–ª–æ–≤–∞': os.getenv('Galilova').strip(),
        '–¢–æ—Ä–≥–º–∞–∫—Å–∏–º—É–º': os.getenv('TORGMAKSIMUM').strip(),
        '–ú–∞—Ä—Ç—ã–Ω–µ–Ω–∫–æ': os.getenv('Martynenko').strip()
    }

    for name, val in all_iosifovy.items():
        idkt = query_idkt(cabinet=name, hdrs=val)
        df_9 = campaing_query(hdrs=val, status=9, cabinet=name, IDKT=idkt)
        time.sleep(60)  # –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
        df_11 = campaing_query(hdrs=val, status=11, cabinet=name, IDKT=idkt)

        goup = pd.concat([
            df_9, df_11
        ], ignore_index=False).drop_duplicates()

        campaing_data[name] = goup.groupby([
            'ID', '–ù–µ–¥–µ–ª—è',
        ])['–†–∞—Å—Ö–æ–¥,–†'].sum().reset_index()

    print(*[f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {name}: {len(df)} —Å—Ç—Ä–æ–∫" for name,
          df in campaing_data.items()], sep='\n')

    save_to_gh(campaing_data)

    end = time.time()
    print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n{(end-begin)/60:.2f} –º–∏–Ω—É—Ç")
