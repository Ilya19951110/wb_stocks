from scripts.utils.setup_logger import make_logger
from scripts.utils.telegram_logger import send_tg_message
from scripts.utils.config.factory import get_client_info
from dotenv import load_dotenv
from collections import defaultdict
import aiohttp
import asyncio
import pandas as pd

load_dotenv()

logger = make_logger(__name__, use_telegram=False)


async def main(run_funck, exclude_names: list[str] = None, postprocess_func=None, cabinet=None) -> dict[str, tuple[pd.DataFrame, pd.DataFrame]]:
    """
    üîÅ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ –∫–∞–±–∏–Ω–µ—Ç–∞–º WB/Ozon.

    –§—É–Ω–∫—Ü–∏—è `main` –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ö–æ–¥ –≤—Å–µ—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ (–∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ `cabinet`),
    –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é `run_funck`, –∞ –∑–∞—Ç–µ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É `postprocess_func`. 
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å `{–∫–∞–±–∏–Ω–µ—Ç: (DataFrame, DataFrame)}`.

    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    üîß –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    ------------
    run_funck : Callable[..., Awaitable]
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞. 
        –î–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã `name`, `api`, `session` –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–æ–±—ã—á–Ω–æ –∫–æ—Ä—Ç–µ–∂ –∏–ª–∏ DataFrame).

    postprocess_func : Callable[..., tuple[pd.DataFrame, pd.DataFrame]], optional
        –§—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏, –ø—Ä–∏–º–µ–Ω—è–µ–º–∞—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É `run_funck` (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –∏ –ø—Ä.).
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç `*res`, –∞ —Ç–∞–∫–∂–µ `name` –∫–∞–∫ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç.

    cabinet : dict[str, str], optional
        –°–ª–æ–≤–∞—Ä—å –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `{name: api_key}`. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `get_client_info()`.

    üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    --------------
    dict[str, tuple[pd.DataFrame, pd.DataFrame]]
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞.
        –ö–ª—é—á ‚Äî –∏–º—è –∫–∞–±–∏–Ω–µ—Ç–∞, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –∫–æ—Ä—Ç–µ–∂ —Å –¥–≤—É–º—è DataFrame.

    ‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫:
    ---------------------
    - –ï—Å–ª–∏ `run_funck` –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π, —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ `failed`.
    - –û—à–∏–±–∫–∏ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ Telegram.
    - Telegram –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ –∫–∞–∂–¥–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É.

    üìà –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    ------------------------
    data = asyncio.run(main(
        run_funck=execute_run_cabinet,
        postprocess_func=group_advert_and_id,
    ))

    üß† –ê–≤—Ç–æ—Ä: –ò–ª—å—è  
    üóì –í–µ—Ä—Å–∏—è: –ò—é–ª—å 2025
    """
    status_report = defaultdict(str)
    result, failed = {}, {}

    exclude_names = exclude_names or []

    if exclude_names:
        logger.info(f"‚õî –ò—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {', '.join(exclude_names)}")

    if cabinet is None:
        all_api_request = get_client_info()['api_keys_wb']

    else:
        all_api_request = cabinet

    all_api_request = {
        name: api for name, api in all_api_request.items() if name not in exclude_names
    }

    async with aiohttp.ClientSession() as session:
        tasks = [
            run_funck(name=name, api=api, session=session)
            for name, api in all_api_request.items()
        ]

        response = await asyncio.gather(*tasks, return_exceptions=True)

        for (name, api_key), res in zip(all_api_request.items(), response):

            if isinstance(res, Exception):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {name}: {res}")

                status_report[name] = "‚ùå –û–®–ò–ë–ö–ê"
                failed[name] = api_key
                continue

            if postprocess_func:
                try:
                    if res is not None and isinstance(res, (list, tuple)):
                        data = postprocess_func(*res, name=name)

                        result[name] = data
                        logger.info(f'üî•üî•üî•üî•üî•\n–ó–∞–ø—Ä–æ—Å {name} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!!')

                        status_report[name] = "‚úÖ –£–°–ü–ï–®–ù–û"
                    else:
                        logger.warning(
                            f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω postprocess –¥–ª—è {name} ‚Äî res = {res}")

                        status_report[name] = "‚ö†Ô∏è –ü–†–û–ü–£–©–ï–ù"
                        failed[name] = api_key

                except Exception as e:
                    msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ postprocess {postprocess_func.__name__} {name} - res: {e}"
                    logger.error(msg)
                    send_tg_message(msg)
            else:
                result[name] = res
                logger.warning(f'üî•üî•üî•üî•üî•\n–ó–∞–ø—Ä–æ—Å  {name} –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω!!')

                status_report[name] = "‚ö†Ô∏è –ù–ï –û–ë–†–ê–ë–û–¢–ê–ù POSTPROCESS"
                failed[name] = api_key

    send_tg_message("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢ –ü–û –ö–ê–ë–ò–ù–ï–¢–ê–ú:")
    for name, status in status_report.items():
        send_tg_message(f"{name:<15} - {status}")

    return result
