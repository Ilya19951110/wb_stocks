import pandas as pd
import asyncio
from scripts.setup_logger import make_logger
from datetime import datetime


async def get_cards(session, name, api):
    logger = make_logger(__name__, use_telegram=True)
    DELAY = 3
    url_cards = "https://content-api.wildberries.ru/content/v2/get/cards/list"
    all_cards, rows, cursor = [], [], None

    while True:

        headers = {"Authorization": api}

        payload = {
            "settings": {
                "sort": {"ascending": False},
                "filter": {"withPhoto": -1},
                "cursor": {"limit": 100},
                "period": {
                    'begin': '2024-01-01',
                    'end': datetime.now().strftime("%Y-%m-%d")
                },
            },
        }

        if cursor:
            payload["settings"]["cursor"].update(cursor)

        try:
            async with session.post(url_cards, headers=headers, json=payload) as response:

                if response.status != 200:
                    error_text = await response.text()
                    logger.error(
                        f"‚ö†Ô∏è ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É 'IDKT': {error_text}, {name}")
                    raise ValueError(error_text)

                cards_list = await response.json()
        except Exception as e:
            logger.error(f"‚ùå‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {name}: {e}")

        else:
            if 'cards' not in cards_list or 'cursor' not in cards_list:
                logger.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞!')
                break

            all_cards.extend([
                {k: v for k, v in card.items() if k != 'description'}
                for card in cards_list['cards'] if isinstance(card, dict)
            ])

            if not cards_list or 'cards' not in cards_list or len(cards_list['cards']) < 100:
                break

            if "updatedAt" in cards_list['cursor'] and 'nmID' in cards_list['cursor']:
                cursor = {
                    "updatedAt": cards_list['cursor']['updatedAt'],
                    "nmID": cards_list['cursor']['nmID']
                }
            else:
                logger.error(
                    f"‚ö†Ô∏è –í –æ—Ç–≤–µ—Ç–µ –æ—Ç {name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'updatedAt' –∏–ª–∏ 'nmID'")
                break

            logger.info('–°–ø–∏–º ‚è≥‚è≥‚è≥')

            await asyncio.sleep(DELAY)

    if all_cards:
        for card in all_cards:
            info = {
                '–ê—Ä—Ç–∏–∫—É–ª WB': card['nmID'],
                'ID KT': card['imtID'],
                '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': card['title'],
                '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞': card['vendorCode'],
                '–ë—Ä–µ–Ω–¥': card['brand'],
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': card['subjectName'],
                '–§–æ—Ç–æ': card['photos'][0]['big'] if card.get('photos') else None,
                '–®–∏—Ä–∏–Ω–∞': card['dimensions']['width'],
                '–í—ã—Å–æ—Ç–∞': card['dimensions']['height'],
                '–î–ª–∏–Ω–∞': card['dimensions']['length'],
                'updatedAt': card['updatedAt']
            }
            for size in card.get('sizes', []):
                for barcode in size.get('skus', []) or [None]:
                    row = info.copy()
                    row.update({
                        '–†–∞–∑–º–µ—Ä': size.get('techSize'),
                        'chrtID': size.get('chrtID'),
                        '–ë–∞—Ä–∫–æ–¥': barcode if barcode else None
                    })
                rows.append(row)

    result = pd.DataFrame(rows)


#  –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º
    res_idkt_save = result.filter(
        ['–ê—Ä—Ç–∏–∫—É–ª WB', 'ID KT', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ë—Ä–µ–Ω–¥', '–†–∞–∑–º–µ—Ä', '–ë–∞—Ä–∫–æ–¥', '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–§–æ—Ç–æ', '–®–∏—Ä–∏–Ω–∞', '–í—ã—Å–æ—Ç–∞', '–î–ª–∏–Ω–∞'])
    idkt_nmid = result[['–ê—Ä—Ç–∏–∫—É–ª WB', 'ID KT', 'updatedAt']]

    logger.info(
        f"üì¶ –î–∞–Ω–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç–∞ {name} —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –≤ DataFrame: {result.shape}\nidkt_nmid —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {idkt_nmid.shape}")
    return res_idkt_save, idkt_nmid
