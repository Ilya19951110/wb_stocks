
from dotenv import load_dotenv
from scripts.setup_logger import make_logger
from scripts.telegram_logger import send_tg_messege
import pandas as pd
import json
import time
from datetime import datetime, timedelta
import asyncio
from functools import partial
from scripts import run_cabinet

load_dotenv()

logger = make_logger(__name__)


async def report_detail(name, api, session):

    stop, page, all_data = 21, 1, []
    url = 'https://seller-analytics-api.wildberries.ru/api/v2/nm-report/detail'
    while True:

        headers = {
            'Authorization': api,
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }
        params = {

            'timezone': 'Europe/Moscow',
            'period': {

                'begin': (datetime.now()-timedelta(days=7)).strftime('%Y-%m-%d 00:00:00'),
                'end': (datetime.now()-timedelta(days=1)).strftime('%Y-%m-%d 23:59:59')
            },
            'orderBy': {
                'field': 'openCard',
                'mode': 'desc'
            },
            'page': page
        }
        try:
            async with session.post(url, headers=headers, json=params) as result:
                logger.info(f"{name} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {result.status}")

                if result.status != 200:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {result.status}")
                    break

                detail = await result.json()
        except Exception as e:
            logger.error(f"‚ùå‚ùå  –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {name}: {e}")

        else:
            cards = detail.get('data', {}).get('cards', [])

            if not cards:
                break

            all_data.extend(cards)

            logger.info(
                f'–ü–æ–ª—É—á–µ–Ω–æ {len(cards)} –∑–∞–ø–∏—Å–µ–π –∫–∞–±–∏–Ω–µ—Ç–∞ {name}. –í—Å–µ–≥–æ: {len(all_data)}')
            if len(cards) < 1000:
                break

            page += 1
            logger.info(f'–°–ø–∏–º {stop} —Å–µ–∫')

            await asyncio.sleep(stop)

    return all_data


def get_current_week_sales_df(sales, ID, name):

    def read_to_json(data, parent_key='', sep='_'):

        items = []

        for k, v in data.items():
            new_key = f"{parent_key}{sep}{k}" if parent_key else k
            if isinstance(v, dict):
                items.extend(read_to_json(v, new_key, sep=sep).items())
            else:
                items.append((new_key, v))

        return dict(items)

    data = [read_to_json(item) for item in sales]
    df = pd.DataFrame(data)

    assert isinstance(df, pd.DataFrame), "–í—Ö–æ–¥–Ω–æ–π df –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å DataFrame"

    columns_rus = [
        '–ê—Ä—Ç–∏–∫—É–ª WB', '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞', '–ë—Ä–µ–Ω–¥', 'ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', '–ù–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞', '–ö–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –∫–∞—Ä—Ç–æ—á–∫–∏', '–î–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É',
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤', '–°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤ (—Ä—É–±)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∫—É–ø–æ–≤', '–°—É–º–º–∞ –≤—ã–∫—É–ø–æ–≤ (—Ä—É–±)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ–Ω', '–°—É–º–º–∞ –æ—Ç–º–µ–Ω (—Ä—É–±)', '–°—Ä–µ–¥–Ω–µ–µ –∑–∞–∫–∞–∑–æ–≤ –≤ –¥–µ–Ω—å', '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ (—Ä—É–±)',
        '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É (%)', '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∑–∞–∫–∞–∑ (%)', '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –≤—ã–∫—É–ø (%)', '–ù–∞—á–∞–ª–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞', '–ö–æ–Ω–µ—Ü –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –∫–∞—Ä—Ç–æ—á–∫–∏ (–ø—Ä–µ–¥.)', '–î–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É (–ø—Ä–µ–¥.)',
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ (–ø—Ä–µ–¥.)', '–°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤ (–ø—Ä–µ–¥., —Ä—É–±)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∫—É–ø–æ–≤ (–ø—Ä–µ–¥.)', '–°—É–º–º–∞ –≤—ã–∫—É–ø–æ–≤ (–ø—Ä–µ–¥., —Ä—É–±)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ–Ω (–ø—Ä–µ–¥.)', '–°—É–º–º–∞ –æ—Ç–º–µ–Ω (–ø—Ä–µ–¥., —Ä—É–±)', '–°—Ä–µ–¥–Ω–µ–µ –∑–∞–∫–∞–∑–æ–≤ –≤ –¥–µ–Ω—å (–ø—Ä–µ–¥.)',
        '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ (–ø—Ä–µ–¥., —Ä—É–±)', '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É (–ø—Ä–µ–¥., %)', '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∑–∞–∫–∞–∑ (–ø—Ä–µ–¥., %)', '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –≤—ã–∫—É–ø (–ø—Ä–µ–¥., %)', '–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (%)', '–î–∏–Ω–∞–º–∏–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã (%)',
        '–î–∏–Ω–∞–º–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤ (%)', '–î–∏–Ω–∞–º–∏–∫–∞ —Å—É–º–º—ã –∑–∞–∫–∞–∑–æ–≤ (%)', '–î–∏–Ω–∞–º–∏–∫–∞ –≤—ã–∫—É–ø–æ–≤ (%)', '–î–∏–Ω–∞–º–∏–∫–∞ —Å—É–º–º—ã –≤—ã–∫—É–ø–æ–≤ (%)', '–î–∏–Ω–∞–º–∏–∫–∞ –æ—Ç–º–µ–Ω (%)', '–î–∏–Ω–∞–º–∏–∫–∞ —Å—É–º–º—ã –æ—Ç–º–µ–Ω (%)', '–î–∏–Ω–∞–º–∏–∫–∞ —Å—Ä. –∑–∞–∫–∞–∑–æ–≤ –≤ –¥–µ–Ω—å (%)',
        '–î–∏–Ω–∞–º–∏–∫–∞ —Å—Ä. —Ü–µ–Ω—ã (%)', '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É', '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤ –∑–∞–∫–∞–∑', '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤ –≤—ã–∫—É–ø', '–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ', '–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ WB'
    ]

    df = df.rename(
        columns=dict(zip(df.columns.tolist(), columns_rus))
    )

    date_col = ['–ù–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞', '–ö–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞',
                '–ù–∞—á–∞–ª–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞', '–ö–æ–Ω–µ—Ü –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞']

    df[date_col] = df[date_col].apply(
        pd.to_datetime, errors='coerce').apply(lambda x: x.dt.date)

    current_week_col = df.columns[:df.columns.get_loc(
        '–ù–∞—á–∞–ª–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞')].tolist() + df.columns[-3:].tolist()

    current_week = df[current_week_col].copy()

    current_week['–ù–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞'] = pd.to_datetime(
        current_week['–ù–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞'])

    current_week['–ù–æ–º–Ω–µ–¥'] = current_week['–ù–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞'].dt.isocalendar().week

    current_week['–ù–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞'] = pd.to_datetime(
        current_week['–ù–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞']).dt.date

    final_df = pd.merge(
        current_week,
        ID,
        left_on='–ê—Ä—Ç–∏–∫—É–ª WB',
        right_on='–ê—Ä—Ç–∏–∫—É–ª WB',
        how='left',
        indicator=True
    )

    final_df['–ö–∞–±–∏–Ω–µ—Ç'] = name
    final_df['ID KT'] = final_df['ID KT'].fillna(0)

    final_df = final_df.drop_duplicates()
    # ID KT
    final_df = final_df.rename(columns={
        'ID KT': 'ID',
        '–ù–æ–º–Ω–µ–¥': '–ù–µ–¥–µ–ª—è',
        '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –∫–∞—Ä—Ç–æ—á–∫–∏': '–ü–µ—Ä–µ—Ö–æ–¥—ã –≤ –∫–∞—Ä—Ç–æ—á–∫—É',
        '–î–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É': '–ü–æ–ª–æ–∂–∏–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É',
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤': '–ó–∞–∫–∞–∑–∞–ª–∏, —à—Ç',
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∫—É–ø–æ–≤': '–í—ã–∫—É–ø–∏–ª–∏, —à—Ç',
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ–Ω': '–û—Ç–º–µ–Ω–∏–ª–∏, —à—Ç',
        '–°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤ (—Ä—É–±)': '–ó–∞–∫–∞–∑–∞–ª–∏ –Ω–∞ —Å—É–º–º—É, —Ä—É–±',

    }).filter([
        'ID', '–ù–µ–¥–µ–ª—è', '–ü–µ—Ä–µ—Ö–æ–¥—ã –≤ –∫–∞—Ä—Ç–æ—á–∫—É',	'–ü–æ–ª–æ–∂–∏–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É',	'–ó–∞–∫–∞–∑–∞–ª–∏, —à—Ç',	'–í—ã–∫—É–ø–∏–ª–∏, —à—Ç', '–û—Ç–º–µ–Ω–∏–ª–∏, —à—Ç',	'–ó–∞–∫–∞–∑–∞–ª–∏ –Ω–∞ —Å—É–º–º—É, —Ä—É–±',
    ]).groupby([
        'ID', '–ù–µ–¥–µ–ª—è',
    ]).agg({
        '–ü–µ—Ä–µ—Ö–æ–¥—ã –≤ –∫–∞—Ä—Ç–æ—á–∫—É': 'sum',
        '–ü–æ–ª–æ–∂–∏–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É': 'sum',
        '–ó–∞–∫–∞–∑–∞–ª–∏, —à—Ç': 'sum',
        '–í—ã–∫—É–ø–∏–ª–∏, —à—Ç': 'sum',
        '–û—Ç–º–µ–Ω–∏–ª–∏, —à—Ç': 'sum',
        '–ó–∞–∫–∞–∑–∞–ª–∏ –Ω–∞ —Å—É–º–º—É, —Ä—É–±': 'sum',
    }).reset_index()

    logger.info(final_df.head(5))

    return final_df


if __name__ == '__main__':

    from scripts.upload_to_google_sheet import save_in_gsh
    from scripts.universal_main import main
    send_tg_messege(
        f"üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω 'report_detail': {datetime.now():%Y-%m-%d %H:%M:%S}")
    begin = time.time()

    data = asyncio.run(main(
        run_funck=partial(run_cabinet.execute_run_cabinet,
                          func_name='report_detail'),
        postprocess_func=get_current_week_sales_df,
        cache_name="test_cache.pkl"
    ))

    save_in_gsh(dict_data=data, wks_name='API WB –í–æ—Ä–æ–Ω–∫–∞')

    end = time.time()
    print(f"‚è± –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {(end - begin)/60:.2f} –º–∏–Ω—É—Ç")
