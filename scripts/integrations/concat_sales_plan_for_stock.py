from scripts.utils.gspread_client import get_gspread_client
import pandas as pd
from scripts.utils.prepare_values_df import prepare_values_for_sheets

import gspread
from scripts.utils.setup_logger import make_logger

logger = make_logger(__name__, use_telegram=False)


def get_data_from_google_sheet(spreadsheet: gspread.Spreadsheet, worksheet: str):
    try:
        logger.info(
            f"üì• –ß–∏—Ç–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {spreadsheet.title}, –ª–∏—Å—Ç: {worksheet}")
        ws = spreadsheet.worksheet(worksheet)

        data = ws.get_all_values()
        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {len(data)} —Å—Ç—Ä–æ–∫")

        return pd.DataFrame(data[1:], columns=data[0])
    except Exception as e:
        logger.exception(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Google Sheet {spreadsheet.title}/{worksheet}: {e}")
        return pd.DataFrame()


def concat_plan_and_stock_to_manager(*args):
    logger.info(f"üîÑ –û–±—ä–µ–¥–∏–Ω—è—é {len(args)} DataFrame –≤ –æ–¥–∏–Ω")
    df = pd.concat([*args], ignore_index=True)
    logger.info(
        f"‚úÖ –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π DataFrame: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")
    return df


def push_df_in_table(df: pd.DataFrame, spreadsheet: gspread.Spreadsheet, ws: str):

    try:
        logger.info(
            f"üìÇ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ —Ç–∞–±–ª–∏—Ü–µ: {spreadsheet.title}, –ª–∏—Å—Ç: {ws}")
        worksheet = spreadsheet.worksheet(ws)

        logger.info(f"üßπ –û—á–∏—â–µ–Ω –ª–∏—Å—Ç: {ws}")
        worksheet.clear()

    except Exception:
        logger.warning(f"‚ö†Ô∏è –õ–∏—Å—Ç {ws} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π")

        worksheet = spreadsheet.add_worksheet(title=ws, rows=1, cols=1,)

    try:
        logger.info(
            f"‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∂–∞—é DataFrame –≤ –ª–∏—Å—Ç {ws}: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")

        worksheet.update(
            [df.columns.tolist()] + prepare_values_for_sheets(df),

        )

        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–≥—Ä—É–∂–µ–Ω–æ –≤ {spreadsheet.title}/{ws}")
    except Exception as e:
        logger.warning(
            f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –≤ Google Sheet {spreadsheet.title}/{ws}: {e}")


if __name__ == '__main__':
    worksheet: str = '–û—Å—Ç–∞—Ç–∫–∏ API'
    gs = get_gspread_client()

    SHELUDKO_TABLE = '–ü–ª–∞–Ω –ø—Ä–æ–¥–∞–∂ –ò–ü –®–µ–ª—É–¥—å–∫–æ'
    MISHNEVA_TABLE = '–ü–ª–∞–Ω –ø—Ä–æ–¥–∞–∂ –ò–ü –ú–∏—à–Ω–µ–≤–∞ –ò'
    MANAGER_TABLE = '–¢–∞–±–ª–∏—Ü–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞'
    CONTENT_TASKS = '–ó–ê–î–ê–ß–ò –ø–æ –ö–û–ù–¢–ï–ù–¢–£ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å CTR'

    CONTENT_TASKS_SPREADSHEET = gs.open(CONTENT_TASKS)
    SHELUDKO_SPREADSHEET = gs.open(SHELUDKO_TABLE)
    MISHNEVA_SPREADSHEET = gs.open(MISHNEVA_TABLE)
    MANAGER_SPREADSHEET = gs.open(MANAGER_TABLE)

    df = concat_plan_and_stock_to_manager(
        get_data_from_google_sheet(SHELUDKO_SPREADSHEET, worksheet),
        get_data_from_google_sheet(MISHNEVA_SPREADSHEET, worksheet)
    )

    push_df_in_table(
        df,
        MANAGER_SPREADSHEET,
        worksheet
    )

    push_df_in_table(
        df,
        CONTENT_TASKS_SPREADSHEET,
        worksheet
    )


# py -m scripts.integrations.concat_sales_plan_for_stock
