import pandas as pd
from scripts.integrations.utils.tools import get_data_from_google_sheet
from scripts.utils.prepare_values_df import prepare_values_for_sheets
from scripts.utils.gspread_client import get_gspread_client
from scripts.utils.setup_logger import make_logger
from gspread.utils import rowcol_to_a1
import gspread
import asyncio

logger = make_logger(__name__, use_telegram=False)

sem = asyncio.Semaphore(2)


async def push_df_in_google_sheets_async(*args, **kwargs):
    async with sem:
        return await asyncio.to_thread(push_df_in_google_sheets,*args, **kwargs)


def get_data_from_manager_table(spreadsheet: gspread.Spreadsheet, ws: str) -> pd.DataFrame:

    try:
        logger.info(
            f"üì• –ß–∏—Ç–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {spreadsheet.title}, –ª–∏—Å—Ç: {ws}")
        worksheet = spreadsheet.worksheet(ws)

        data = worksheet.get_all_values()

        if not data:
            logger.warning(f"‚ö†Ô∏è –õ–∏—Å—Ç {ws} –ø—É—Å—Ç–æ–π –≤ {spreadsheet.title}")
            return pd.DataFrame()

        logger.info(
            f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {len(data)} —Å—Ç—Ä–æ–∫, {len(data[0])} –∫–æ–ª–æ–Ω–æ–∫")

        df = pd.DataFrame(data[1:], columns=data[0])
        df = df.drop(df.columns[0], axis=1)
        return df

    except Exception as e:
        logger.exception(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {spreadsheet.title}/{ws}: {e}")
        return pd.DataFrame()


def push_df_in_google_sheets(spreadsheet: gspread.Spreadsheet, df: pd.DataFrame, ws: str) -> None:

    logger.info(
        f"‚¨ÜÔ∏è –ù–∞—á–∏–Ω–∞—é –≤—ã–≥—Ä—É–∑–∫—É DataFrame –≤ —Ç–∞–±–ª–∏—Ü—É: {spreadsheet.title}, –ª–∏—Å—Ç: {ws}")

    try:
        worksheet = spreadsheet.worksheet(ws)

        logger.info(f"üìÇ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏—Å—Ç {ws}, –æ—á–∏—â–∞—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ")

        row, col = df.shape
        end_cell = rowcol_to_a1(row + 1, col)
        clear_range = f"A2:{end_cell}"

        logger.debug(f"üßπ –û—á–∏—â–∞—é –¥–∏–∞–ø–∞–∑–æ–Ω {clear_range} –≤ –ª–∏—Å—Ç–µ '{worksheet.title}' ({row} —Å—Ç—Ä–æ–∫, {col} –∫–æ–ª–æ–Ω–æ–∫)")
        worksheet.batch_clear([clear_range])
        logger.debug(f"‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω {clear_range} —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω –≤ –ª–∏—Å—Ç–µ '{worksheet.title}'")
    except Exception:
        logger.warning(
            f"‚ö†Ô∏è –õ–∏—Å—Ç {ws} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π –≤ {spreadsheet.title}")
        worksheet = spreadsheet.add_worksheet(title=ws, rows=1, cols=1)

    try:
        logger.info(
            f"‚úçÔ∏è –ó–∞–ø–∏—Å—ã–≤–∞—é DataFrame –≤ {spreadsheet.title}/{ws}: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")

        worksheet.update(
            values=prepare_values_for_sheets(df),
            value_input_option='USER_ENTERED',
            range_name='A2'
        )

        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–≥—Ä—É–∂–µ–Ω–æ –≤ {spreadsheet.title}/{ws}")
    except Exception as e:
        logger.exception(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –≤ Google Sheet {spreadsheet.title}/{ws}: {e}")


if __name__ == '__main__':

    
    gs = get_gspread_client()

    MANAGER_DF =  get_data_from_manager_table(gs.open('–¢–∞–±–ª–∏—Ü–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞'), ws='Aurum')
    
    info = {
        '–®–µ–ª—É–¥—å–∫–æ': {
            'spreadsheet': gs.open('–ü–ª–∞–Ω –ø—Ä–æ–¥–∞–∂ –ò–ü –®–µ–ª—É–¥—å–∫–æ'),
            'update_sheet': '–ê—É—Ä—É–º',
        },
        '–ú–∏—à–Ω–µ–≤–∞': {
            'spreadsheet': gs.open('–ü–ª–∞–Ω –ø—Ä–æ–¥–∞–∂ –ò–ü –ú–∏—à–Ω–µ–≤–∞ –ò'),
            'update_sheet': '–ê—É—Ä—É–º',
        },
    }

    for name, conf in info.items():
        logger.info(f"üìÇ [{name}] –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É ‚Üí {conf['update_sheet']}")

        try:
            push_df_in_google_sheets(
                conf['spreadsheet'],
                MANAGER_DF,
                conf['update_sheet']
            )
            logger.info(f"‚úÖ [{name}] –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ '{conf['update_sheet']}'")

        except Exception as e:
            logger.error(f"‚ùå [{name}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)

   
# py -m scripts.integrations.reverse_integration_aurum
