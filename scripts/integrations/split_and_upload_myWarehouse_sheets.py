import pandas as pd
from scripts.utils.gspread_client import get_gspread_client
from scripts.utils.setup_logger import make_logger
from scripts.utils.config.factory import sheets_names, tables_names
from gspread_dataframe import set_with_dataframe
from scripts.utils.telegram_logger import send_tg_message

logger = make_logger(__name__, use_telegram=False)


def upload_mywerehouse_in_gsheets() -> None:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ MyWarehouse –≤ –æ–¥–Ω—É Google –¢–∞–±–ª–∏—Ü—É –≤ –¥—Ä—É–≥–æ–π.

    –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç:
    1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞ Google Sheets (—á–µ—Ä–µ–∑ gspread).
    2. –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–∏—Å—Ç–∞ `API –ú–æ–π —Å–∫–ª–∞–¥` –≤ —Ç–∞–±–ª–∏—Ü–µ `–ê—Å—Ä—Ç–∏–º–µ–Ω—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –ø–æ–ª–Ω–∞—è`.
    3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫—É —Ç–∞–±–ª–∏—Ü—ã `–ü—Ä–∏–±—ã–ª—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏`: –æ—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ª–∏—Å—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ.
    4. –ó–∞–≥—Ä—É–∑–∫—É —Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ª–∏—Å—Ç: 'API –ú–æ–π —Å–∫–ª–∞–¥'.

    –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è, –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –∏ –ø–∏—à—É—Ç—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ –ª–æ–≥.

    –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
        –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram, –Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –ø–æ —á–∞—Å—Ç—è–º.

    Returns:
        None
    """
    try:
        logger.info("üì° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GSpread –∫–ª–∏–µ–Ω—Ç–∞...")
        gs = get_gspread_client()

        sheet_name = sheets_names()['api_mywarehouse']

        logger.info(f"üì• –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∞–±–ª–∏—Ü—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∞: {extract_table}")

        extract_table = tables_names()['wb_matrix_complete']
        extract_spreadsheet = gs.open(extract_table)
        extract_wsheet = extract_spreadsheet.worksheet(sheet_name)

        logger.info(f"üìÑ –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ª–∏—Å—Ç–∞: {sheet_name}")
        mywarehouse_data = extract_wsheet.get_all_values()

        mywarehouse_df = pd.DataFrame(
            mywarehouse_data[1:], columns=mywarehouse_data[0])

        logger.info(
            f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: {mywarehouse_df.shape[0]} —Å—Ç—Ä–æ–∫, {mywarehouse_df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")
    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ '{sheet_name}': {e}"
        send_tg_message(msg)
        logger.exception(msg)

    try:

        logger.info(
            f"üì¶ –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞: '{tables_names()['profit_supplier']}'")
        import_table = tables_names()['profit_supplier']

        import_spreadsheet = gs.open(import_table)

        if sheet_name in [ws.title for ws in import_spreadsheet.worksheets()]:

            logger.info(f"üìÑ –õ–∏—Å—Ç '{sheet_name}' –Ω–∞–π–¥–µ–Ω ‚Äî –æ—á–∏—â–∞—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ")

            import_worksheet = import_spreadsheet.worksheet(sheet_name)

            import_worksheet.clear()
            logger.info(f"üßπ –õ–∏—Å—Ç '{sheet_name}' —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω")
        else:

            logger.info(f"üÜï –õ–∏—Å—Ç '{sheet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π")

            import_worksheet = import_spreadsheet.add_worksheet(
                title=sheet_name,
                rows=mywarehouse_df.shape[0],
                cols=mywarehouse_df.shape[1]
            )
    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ª–∏—Å—Ç–∞ '{sheet_name}' –≤ —Ç–∞–±–ª–∏—Ü–µ '{import_table}': {e}"
        send_tg_message(msg)
        logger.exception(msg)

    try:
        logger.info(f"‚úÖ –õ–∏—Å—Ç '{sheet_name}' —Å–æ–∑–¥–∞–Ω")
        set_with_dataframe(
            import_worksheet,
            mywarehouse_df,
            row=1,
            col=1,
            include_column_header=True,
            include_index=False
        )

        logger.info(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {mywarehouse_df.shape[0]} —Å—Ç—Ä–æ–∫, {mywarehouse_df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫ –≤ –ª–∏—Å—Ç '{sheet_name}'")
    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç '{sheet_name}': {e}"
        send_tg_message(msg)
        logger.exception(msg)

    logger.info("üèÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö MyWarehouse –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")


if __name__ == '__main__':

    upload_mywerehouse_in_gsheets()
# python -m scripts.integrations.split_and_upload_myWarehouse_sheets
