from scripts.utils.config.factory import get_assortment_matrix_complete, get_assortment_matrix_complete_OZON, sheets_names
from scripts.utils.gspread_client import get_gspread_client
import pandas as pd
from gspread_dataframe import set_with_dataframe
from scripts.utils.setup_logger import make_logger
from scripts.utils.telegram_logger import send_tg_message

logger = make_logger(__name__, use_telegram=True)


def transfer_wb_barcodes_to_oz_sheet(clear_range=['A:B']) -> None:

    try:
        logger.info("üîå –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ GSpread –∫–ª–∏–µ–Ω—Ç—É...")

        gs = get_gspread_client()

        wsheet = sheets_names()['barcodes_wb_oz']
        table_matrix_oz = get_assortment_matrix_complete_OZON()

        logger.info(f"üîë –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Ç–∞–±–ª–∏—Ü–µ OZ: {table_matrix_oz}")
    except Exception:
        logger.exception(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GSpread –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ —Ç–∞–±–ª–∏—Ü—ã OZ")
        return

    def connecting_to_amatrix_wb(sheet_name='API 2') -> pd.DataFrame:
        try:
            logger.info(f"üì• –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã WB: {sheet_name}")

            table_matrix_wb = get_assortment_matrix_complete()
            spreadsheet = gs.open(table_matrix_wb)

            worksheet = spreadsheet.worksheet(sheet_name)

            barcode = [row[:2] for row in worksheet.get_all_values()]

            df_barcode = pd.DataFrame(barcode[1:], columns=barcode[0])

            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã WB")
            return df_barcode

        except Exception:
            logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã WB")
            return
    try:
        spreadsheet_oz = gs.open(table_matrix_oz)

        wsheet_oz = spreadsheet_oz.worksheet(wsheet)
        logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω –ª–∏—Å—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: '{wsheet}'")

    except Exception:
        logger.exception(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ –ª–∏—Å—Ç–∞ '{wsheet}' –≤ OZ")
        return

    try:
        logger.info(f"üßπ –û—á–∏—â–∞—é –¥–∏–∞–ø–∞–∑–æ–Ω {clear_range} –≤ –ª–∏—Å—Ç–µ '{wsheet}'")
        wsheet_oz.batch_clear(clear_range)

        df = connecting_to_amatrix_wb()

        if df.empty:
            logger.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∏–∑ WB –ø—É—Å—Ç—ã, –≤—ã–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return

        set_with_dataframe(
            wsheet_oz,
            df,
            row=1,
            col=1,
            include_column_header=True,
            include_index=False
        )
        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–≥—Ä—É–∂–µ–Ω—ã –≤ '{wsheet}'")
    except Exception:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç '{wsheet}'")

    logger.info(f"‚úÖ –ë–∞—Ä–∫–æ–¥—ã WB —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ '{wsheet}'")


if __name__ == '__main__':
    send_tg_message("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –ø–æ –ø–µ—Ä–µ–Ω–æ—Å—É –±–∞—Ä–∫–æ–¥–æ–≤ WB ‚Üí OZ")

    transfer_wb_barcodes_to_oz_sheet()
