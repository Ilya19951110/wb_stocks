from scripts.spreadsheet_tools.push_mywarehouse import upload_my_werehouse_df_in_assortment_matrix_full
from scripts.utils.setup_logger import make_logger
from dotenv import load_dotenv
import pandas as pd
import requests
import time
import os
load_dotenv()


logger = make_logger(__name__, use_telegram=True)


def get_mywerehouse_stocks() -> pd.DataFrame:
    logger.info("üì¶ –°—Ç–∞—Ä—Ç —Å–±–æ—Ä–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏–∑ API –ú–æ–π –°–∫–ª–∞–¥")

    url = 'https://api.moysklad.ru/api/remap/1.2/report/stock/all'
    headers = {
        'Authorization': f"Bearer {os.getenv('my_warehouse')}",

    }
    print("üß™ my_warehouse =", os.getenv('my_warehouse'))

    werehouse = []
    offset = 0
    limit = 1000
    while True:
        try:

            params = {
                'limit': limit,
                'offset': offset
            }
            logger.info(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å offset= {offset}")

            res = requests.get(url=url, headers=headers, params=params)

            if res.status_code != 200:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {res.status_code}")
                logger.warning(res.text)
                break

            result = res.json()
            rows = result.get('rows', [])

            if not rows:
                logger.info("üö´ –ë–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º.")
                break

            werehouse.extend(rows)

            logger.info(
                f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫, –≤—Å–µ–≥–æ: {len(werehouse)}")

            offset += limit

            time.sleep(0.5)

        except Exception:
            logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å API")

    result_werehouse = []
    for house in werehouse:
        result_werehouse.append({
            # 'meta': house.get('meta'),
            '–û—Å—Ç–∞—Ç–∫–∏–í—Å–µ–≥–æ': house.get('stock'),
            'inTransit': house.get('inTransit'),
            'reserve': house.get('reserve'),
            '–û—Å—Ç–∞—Ç–∫–∏': house.get('quantity'),
            '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': house.get('name'),
            'code': house.get('code'),
            '–ê—Ä—Ç–∏–∫—É–ª–ú–æ–π–°–∫–ª–∞–¥': house.get('article'),
            'price': house.get('price'),
            'salePrice': house.get('salePrice'),
            'uom': house.get('uom', {}).get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            'externalCode': house.get('externalCode'),
            'stockDays': house.get('stockDays'),
            "cabinet": house.get('folder', {}).get("name")
        })
    logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(result_werehouse)} –ø–æ–∑–∏—Ü–∏–π –æ—Ç –ú–æ–π–°–∫–ª–∞–¥")

    res = pd.DataFrame(result_werehouse)

    filtered_res = res.filter(
        ['–ê—Ä—Ç–∏–∫—É–ª–ú–æ–π–°–∫–ª–∞–¥', '–û—Å—Ç–∞—Ç–∫–∏–í—Å–µ–≥–æ'])

    logger.info(filtered_res.head(2))
    return filtered_res


if __name__ == '__main__':
    #  –ó–∞–ø—É—Å–∫

    werehouse = get_mywerehouse_stocks()

    upload_my_werehouse_df_in_assortment_matrix_full(
        mywerehouse=werehouse, clear_range=['A:B'])
# py -m scripts.my_werehouse.get_warehouse_api
