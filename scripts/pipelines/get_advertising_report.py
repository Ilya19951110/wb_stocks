from scripts.spreadsheet_tools.upload_to_gsheet_advert_sales import save_in_gsh
from scripts.postprocessors.group_advert import group_advert_and_id
from scripts.utils.config.factory import get_requests_url_wb, sheets_names
from scripts.utils.telegram_logger import send_tg_message
from scripts.engine.run_cabinet import execute_run_cabinet
from scripts.engine.universal_main import main
from scripts.utils.setup_logger import make_logger
from datetime import datetime, timedelta
from functools import partial
import pandas as pd
import aiohttp
import asyncio
import time


logger = make_logger(__name__)


async def campaign_query(api: str, name: str, session: aiohttp.ClientSession) -> pd.DataFrame:
    """
    campaign_query:
        –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ api wb –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:

    Raises:
        adverts: –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏—è—Ö —Å –∏—Ö '—Ä–∫ id'. 
        stats: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ params id —Ä–∫ –∏ –ø–µ—Ä–∏–æ–¥ date_from –∏ date_to. –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∫ –∑–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –ø–µ—Ä–æ–∏–¥ 

    Returns:
        _type_: DataFrame, advert_df - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∫ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—É—é –≤ DataFrame


    """
    url_count = get_requests_url_wb()

    url_fullstats = get_requests_url_wb()

    camp_data, advert_sp = [], []

    date_from = (datetime.now()-timedelta(days=7)).strftime('%Y-%m-%d')
    date_to = (datetime.now()-timedelta(days=1)).strftime('%Y-%m-%d')

    headers = {'Authorization': api}

    async with session.get(url_count['promotion_count'], headers=headers) as adverts:

        if adverts.status == 204:
            logger.error(
                f"‚ö†Ô∏è ‚ö†Ô∏è –ò–∑ 'campaign_query': –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö (204) –¥–ª—è {name}")
            return pd.DataFrame()

        if adverts.status != 200:
            error_text = await adverts.text()

            logger.error(f"‚ö†Ô∏è ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–º–ø–∞–Ω–∏–π: {error_text}")
            raise ValueError(error_text)

        if adverts.status == 200:
            camp = await adverts.json()

        for block in camp['adverts']:
            advert_type = block['type']
            advert_count = block['count']
            advert_status = block['status']

            for advert in block['advert_list']:
                advert['type'] = advert_type
                advert['status'] = advert_status
                advert['count'] = advert_count
                advert_sp.append(advert)

        advert_df = pd.DataFrame(advert_sp)

        if not camp.get('adverts'):
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –¥–ª—è {name}")
            return pd.DataFrame()

        logger.info(
            f"‚úÖ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(advert_df)} –∫–∞–º–ø–∞–Ω–∏–π –¥–ª—è {name}".upper())

    params = [{'id': c, 'interval': {
        'begin': date_from, 'end': date_to}}for c in advert_df['advertId']]

    logger.info(
        f"üì• –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è {len(params)} –∫–∞–º–ø–∞–Ω–∏–π ‚Äî {name}".upper())

    async with session.post(url_fullstats['advert_fullstats'], headers=headers, json=params) as stats:
        if stats.status != 200:
            error_text = await stats.text()
            raise ValueError(f"‚ö†Ô∏è‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {error_text}")

        fullstats = await stats.json()

        if not fullstats:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {name}")
            return pd.DataFrame()

        logger.info(
            f"üìä –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {name}: {len(fullstats)} –∑–∞–ø–∏—Å–µ–π".upper())

    if fullstats != None:

        for c in fullstats:
            for d in c['days']:
                for a in d['apps']:
                    for nm in a['nm']:
                        nm['appType'] = a['appType']
                        nm['date'] = d['date']
                        nm['advertId'] = c['advertId']
                        camp_data.append(nm)

        camp_df = pd.DataFrame(camp_data)
        camp_df['–ö–∞–±–∏–Ω–µ—Ç'] = name
        return camp_df
    else:
        logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {name}")
        return pd.DataFrame()


if __name__ == '__main__':

    """
        data - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ main() –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ñ–∞–π–ª–µ universal_main.py

        main() - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞:
            1. —Ñ—É–Ω–∫—Ü–∏—è run_cabinet_advert, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ñ–∞–π–ª–µ run_cabinet.py
            2. –§—É–Ω–∫—Ü–∏—è group_advert_and_id, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è run_cabinet_advert. 
                 group_advert_and_id –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ñ–∞–π–ª–µ advertising_campaign_statistics.py

        save_in_gsh() - –≤—ã–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç main(), –∫–æ—Ç–æ—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ data. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç 2 –∞—Ä–≥—É–º–µ–Ω—Ç–∞:
            1. data - —Ä–µ–∑—É–ª—å—Ç–∞—Ç main()
            2. wks_name - –∏–º—è –ª–∏—Å—Ç–∞ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏
        save_in_gsh() –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ñ–∞–π–ª–µ load_in_gsh.py


    """

    send_tg_message(
        f"üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω 'campaign_query': {datetime.now():%Y-%m-%d %H:%M:%S}")
    begin = time.time()

    data = asyncio.run(main(
        run_funck=partial(execute_run_cabinet,
                          func_name='campaign_query'),
        postprocess_func=group_advert_and_id,
        cache_name="test_cache.pkl"
    ))

    worksheet = sheets_names()['api_wb_advert']
    save_in_gsh(dict_data=data, worksheet_name=worksheet)

    end = time.time()
    print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n{(end-begin)/60:.2f} –º–∏–Ω—É—Ç")
