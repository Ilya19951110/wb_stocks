from scripts.spreadsheet_tools.upload_to_gsheet_advert_sales import save_in_gsh
from scripts.postprocessors.group_advert import group_advert_and_id
from scripts.utils.config.factory import get_requests_url_wb, sheets_names
from scripts.utils.telegram_logger import send_tg_message
from scripts.engine.run_cabinet import execute_run_cabinet
from scripts.utils.telegram_logger import send_tg_message
from scripts.engine.universal_main import main
from scripts.utils.setup_logger import make_logger
from datetime import datetime, timedelta
from functools import partial
import pandas as pd
import aiohttp
import asyncio
import time
import os
from dotenv import load_dotenv
load_dotenv()

logger = make_logger(__name__, use_telegram=False)


async def campaign_query(api: str, name: str, session: aiohttp.ClientSession) -> pd.DataFrame:
    """
    üì¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ WB –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –∫–∞–º–ø–∞–Ω–∏—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é.

    –§—É–Ω–∫—Ü–∏—è `campaign_query` –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ API Wildberries, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å:
    1. –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π (–ø–æ –∫–∞–±–∏–Ω–µ—Ç–∞–º).
    2. –î–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º –∏ —Ç–æ–≤–∞—Ä–∞–º –≤–Ω—É—Ç—Ä–∏ —ç—Ç–∏—Ö –∫–∞–º–ø–∞–Ω–∏–π.

    üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–≤—è–∑–∫–µ —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –¥–≤–∏–∂–∫–æ–º `main()` –∏ —Ñ—É–Ω–∫—Ü–∏–µ–π `execute_run_cabinet`.

    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    üîß –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    -------------
    api : str
        –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API WB (–æ—Ç–¥–µ–ª—å–Ω—ã–π –Ω–∞ –∫–∞–∂–¥—ã–π –∫–∞–±–∏–Ω–µ—Ç).

    name : str
        –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –∏—Ç–æ–≥–æ–≤—ã–π DataFrame –∫–∞–∫ –º–µ—Ç–∫–∞.

    session : aiohttp.ClientSession
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è HTTP-—Å–µ—Å—Å–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤.

    üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    -------------
    pd.DataFrame
        –¢–∞–±–ª–∏—Ü–∞ —Å –ø–æ–ª—è–º–∏:
            - advertId
            - date
            - appType (–º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ / –≤–µ–±)
            - –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            - –ö–∞–±–∏–Ω–µ—Ç (–∏–º—è –∫–∞–±–∏–Ω–µ—Ç–∞)

    üóÇÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–ª—é—á–µ–≤—ã–µ URL:
    -----------------------------
    - `promotion_count` ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π.
    - `advert_fullstats` ‚Äî –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –∫–∞–º–ø–∞–Ω–∏—è–º.

    üìÜ –ü–µ—Ä–∏–æ–¥:
    ---------
    - –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è: —Å (—Å–µ–≥–æ–¥–Ω—è - 7 –¥–Ω–µ–π) –ø–æ (–≤—á–µ—Ä–∞).
    - –§–æ—Ä–º–∞—Ç: YYYY-MM-DD

    üì¶ –ü–æ–≤–µ–¥–µ–Ω–∏–µ:
    ------------
    - –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞–º–ø–∞–Ω–∏–π: –≤–µ—Ä–Ω—ë—Ç –ø—É—Å—Ç–æ–π DataFrame –∏ –ª–æ–≥–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.
    - –ï—Å–ª–∏ API –≤–µ—Ä–Ω—ë—Ç –æ—à–∏–±–∫—É: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ø–∞–¥—ë—Ç –≤ Telegram.
    - –î–∞–Ω–Ω—ã–µ –∏–∑ `fullstats` —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –ø–æ –¥–Ω—è–º, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º –∏ `nmId`.

    üìå –ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞:
    ------------------
    asyncio.run(
        campaign_query(
            api='Bearer xxxxxx',
            name='–†–∞—Ö–µ–ª—å',
            session=aiohttp.ClientSession()
        )
    )

    üß† –ê–≤—Ç–æ—Ä: –ò–ª—å—è  
    üóì –í–µ—Ä—Å–∏—è: –ò—é–ª—å 2025
    """
    url_count = get_requests_url_wb()['promotion_count']

    url_fullstats = get_requests_url_wb()['advert_fullstats']

    camp_data = []

    date_from = (datetime.now()-timedelta(days=7)).strftime('%Y-%m-%d')
    date_to = (datetime.now()-timedelta(days=1)).strftime('%Y-%m-%d')

    headers = {'Authorization': api}

    async with session.get(url_count, headers=headers) as adverts:

        if adverts.status == 204:
            msg = f"‚ö†Ô∏è ‚ö†Ô∏è –ò–∑ 'campaign_query': –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö (204) –¥–ª—è {name}"
            logger.error(msg)
            send_tg_message(msg)
            return pd.DataFrame()

        if adverts.status != 200:
            error_text = await adverts.text()

            msg = f"‚ö†Ô∏è ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–º–ø–∞–Ω–∏–π:\n{error_text}"
            logger.error(msg)
            raise ValueError(msg)

        if adverts.status == 200:
            camp = await adverts.json()

        advert_id = [
            a['advertId']
            for adv in camp['adverts']
            if 'advert_list' in adv
            for a in adv['advert_list']
        ]

        logger.info(
            f"‚úÖ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(advert_id)} –∫–∞–º–ø–∞–Ω–∏–π –¥–ª—è {name}".upper())

    params = [{'id': c, 'interval': {
        'begin': date_from, 'end': date_to}} for c in advert_id]

    logger.info(
        f"üì• –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è {len(params)} –∫–∞–º–ø–∞–Ω–∏–π ‚Äî {name}".upper())

    async with session.post(url_fullstats, headers=headers, json=params) as stats:
        if stats.status != 200:
            error_text = await stats.text()
            msg = f"‚ö†Ô∏è‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {error_text}"
            send_tg_message(msg)
            raise ValueError(msg)

        fullstats = await stats.json()

        if not fullstats:
            msg = f"‚ö†Ô∏è –ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {name}"
            logger.warning(msg)
            send_tg_message(msg)
            return pd.DataFrame()

        logger.info(
            f"üìä –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {name}: {len(fullstats)} –∑–∞–ø–∏—Å–µ–π".upper())

    if fullstats != None:

        for c in fullstats:
            for d in c['days']:
                for a in d['apps']:
                    for nm in a['nm']:
                        nm['appType'] = a['appType']
                        nm['date'] = d['date']
                        nm['advertId'] = c['advertId']
                        camp_data.append(nm)

        camp_df = pd.DataFrame(camp_data)
        camp_df['–ö–∞–±–∏–Ω–µ—Ç'] = name
        send_tg_message(
            f"‚úÖ –†–µ–∫–ª–∞–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ '{name}' —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞: {len(camp_df)} —Å—Ç—Ä–æ–∫")

        return camp_df

    else:
        msg = f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {name}"
        logger.warning(msg)
        send_tg_message(msg)
        return pd.DataFrame()


if __name__ == '__main__':

    send_tg_message(
        f"üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω 'campaign_query': {datetime.now():%Y-%m-%d %H:%M:%S}")
    begin = time.time()

    data = asyncio.run(main(
        run_funck=partial(execute_run_cabinet,
                          func_name='campaign_query'),
        postprocess_func=group_advert_and_id,
        cabinet={'–ì–∞–ª–∏–ª–æ–≤–∞': os.getenv('Galilova')}
        # exclude_names=['–ú–∏—à–Ω–µ–≤–∞', '–®–µ–ª—É–¥—å–∫–æ',]


    ))

    worksheet = sheets_names()['api_wb_advert']
    save_in_gsh(dict_data=data, worksheet_name=worksheet)

    end = time.time()
    send_tg_message(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n{(end-begin)/60:.2f} –º–∏–Ω—É—Ç")
