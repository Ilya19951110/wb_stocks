from scripts.utils.config.factory import get_requests_url_wb
from scripts.utils.setup_logger import make_logger
from scripts.utils.telegram_logger import send_tg_message
from datetime import datetime
import pandas as pd
import asyncio
import aiohttp

logger = make_logger(__name__, use_telegram=False)


async def get_cards(session: aiohttp.ClientSession, name: str, api: str) -> tuple[pd.DataFrame, pd.DataFrame]:
    """
    üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (ID KT, –±–∞—Ä–∫–æ–¥—ã, —Ä–∞–∑–º–µ—Ä—ã –∏ –¥—Ä.) –∏–∑ –∫–∞–±–∏–Ω–µ—Ç–∞ WB.

    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API Wildberries –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
    –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–∞—Ä—Ç–∏–∫—É–ª–æ–≤ WB) —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É 
    `ID KT`, –±–∞—Ä–∫–æ–¥–∞–º–∏ –∏ –¥—Ä—É–≥–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π.

    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    ------------
    session : aiohttp.ClientSession
        –ê–∫—Ç–∏–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤.

    name : str
        –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö Telegram).

    api : str
        –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ WB API –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–±–∏–Ω–µ—Ç—É.

    üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    --------------
    Tuple[pd.DataFrame, pd.DataFrame]
        - –ü–µ—Ä–≤—ã–π DataFrame `res_idkt_save`: —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –∞—Ä—Ç–∏–∫—É–ª–æ–≤ WB, ID KT, –±—Ä–µ–Ω–¥–æ–≤, —Ä–∞–∑–º–µ—Ä–æ–≤, –±–∞—Ä–∫–æ–¥–æ–≤ –∏ –≥–∞–±–∞—Ä–∏—Ç–æ–≤.
        - –í—Ç–æ—Ä–æ–π DataFrame `idkt_nmid`: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ `–ê—Ä—Ç–∏–∫—É–ª WB`, `ID KT`, `updatedAt`.

    üìå –§–æ—Ä–º–∞—Ç —Ç–∞–±–ª–∏—Ü—ã `res_idkt_save`:
    ---------------------------------
    | –ê—Ä—Ç–∏–∫—É–ª WB | ID KT | –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ | –ë—Ä–µ–Ω–¥ | –†–∞–∑–º–µ—Ä | –ë–∞—Ä–∫–æ–¥ | –ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ | –ö–∞—Ç–µ–≥–æ—Ä–∏—è | –§–æ—Ç–æ | –®–∏—Ä–∏–Ω–∞ | –í—ã—Å–æ—Ç–∞ | –î–ª–∏–Ω–∞ |

    üß™ –û–±—Ä–∞–±–æ—Ç–∫–∞:
    ------------
    - –ó–∞–ø—Ä–æ—Å –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ, —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫—É—Ä—Å–æ—Ä–∞ (updatedAt, nmID).
    - –£–¥–∞–ª—è–µ—Ç—Å—è –ø–æ–ª–µ `description`, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É.
    - –§–æ—Ç–æ –±–µ—Ä—ë—Ç—Å—è –ø–µ—Ä–≤–æ–µ (`photos[0]['big']`), –µ—Å–ª–∏ –µ—Å—Ç—å.
    - –ë–∞—Ä–∫–æ–¥—ã –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –∏–∑ `sizes -> skus`.

    üö® –û—à–∏–±–∫–∏:
    ---------
    - –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.
    - –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –ª–æ–≥–≥–∏—Ä—É—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ.
    - –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã ‚Äî –∑–∞–¥–µ—Ä–∂–∫–∞ `DELAY` —Å–µ–∫—É–Ω–¥ (–¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate-limit).

    üß† –ê–≤—Ç–æ—Ä: –ò–ª—å—è  
    üóì –í–µ—Ä—Å–∏—è: –ò—é–ª—å 2025
    """
    DELAY = 3
    url = get_requests_url_wb()['card_list']
    all_cards, rows, cursor = [], [], None

    while True:

        headers = {"Authorization": api}

        payload = {
            "settings": {
                "sort": {"ascending": False},
                "filter": {"withPhoto": -1},
                "cursor": {"limit": 100},
                "period": {
                    'begin': '2024-01-01',
                    'end': datetime.now().strftime("%Y-%m-%d")
                },
            },
        }

        if cursor:
            payload["settings"]["cursor"].update(cursor)

        try:
            async with session.post(url, headers=headers, json=payload) as response:

                if response.status != 200:
                    error_text = await response.text()

                    msg = f"‚ö†Ô∏è ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É 'IDKT': {error_text}, {name}"
                    send_tg_message(msg)
                    logger.error(msg)
                    raise ValueError(msg)

                cards_list = await response.json()
        except Exception as e:
            msg = f"‚ùå‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {name}: {e}"
            logger.error(msg)
            send_tg_message(msg)

        else:
            if 'cards' not in cards_list or 'cursor' not in cards_list:
                logger.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞!')
                break

            all_cards.extend([
                {k: v for k, v in card.items() if k != 'description'}
                for card in cards_list['cards'] if isinstance(card, dict)
            ])

            if not cards_list or 'cards' not in cards_list or len(cards_list['cards']) < 100:
                break

            if "updatedAt" in cards_list['cursor'] and 'nmID' in cards_list['cursor']:
                cursor = {
                    "updatedAt": cards_list['cursor']['updatedAt'],
                    "nmID": cards_list['cursor']['nmID']
                }
            else:
                msg = f"‚ö†Ô∏è –í –æ—Ç–≤–µ—Ç–µ –æ—Ç {name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'updatedAt' –∏–ª–∏ 'nmID'"
                logger.error(msg)
                send_tg_message(msg)
                break

            logger.info('–°–ø–∏–º ‚è≥‚è≥‚è≥')

            await asyncio.sleep(DELAY)

    if all_cards:
        for card in all_cards:
            info = {
                '–ê—Ä—Ç–∏–∫—É–ª WB': card['nmID'],
                'ID KT': card['imtID'],
                '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': card['title'],
                '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞': card['vendorCode'],
                '–ë—Ä–µ–Ω–¥': card['brand'],
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': card['subjectName'],
                '–§–æ—Ç–æ': card['photos'][0]['big'] if card.get('photos') else None,
                '–®–∏—Ä–∏–Ω–∞': card['dimensions']['width'],
                '–í—ã—Å–æ—Ç–∞': card['dimensions']['height'],
                '–î–ª–∏–Ω–∞': card['dimensions']['length'],
                'updatedAt': card['updatedAt']
            }
            for size in card.get('sizes', []):
                for barcode in size.get('skus', []) or [None]:
                    row = info.copy()
                    row.update({
                        '–†–∞–∑–º–µ—Ä': size.get('techSize'),
                        'chrtID': size.get('chrtID'),
                        '–ë–∞—Ä–∫–æ–¥': barcode if barcode else None
                    })
                rows.append(row)

    result = pd.DataFrame(rows)


#  –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º
    res_idkt_save = result.filter(
        ['–ê—Ä—Ç–∏–∫—É–ª WB', 'ID KT', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ë—Ä–µ–Ω–¥', '–†–∞–∑–º–µ—Ä', '–ë–∞—Ä–∫–æ–¥', '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–§–æ—Ç–æ', '–®–∏—Ä–∏–Ω–∞', '–í—ã—Å–æ—Ç–∞', '–î–ª–∏–Ω–∞'])
    idkt_nmid = result[['–ê—Ä—Ç–∏–∫—É–ª WB', 'ID KT', 'updatedAt']]

    logger.info(
        f"üì¶ –î–∞–Ω–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç–∞ {name} —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –≤ DataFrame: {result.shape}\nidkt_nmid —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {idkt_nmid.shape}")

    logger.info(
        f"üíæ –ì–æ—Ç–æ–≤–ª—é—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å {name}_cards ‚Äî —Å—Ç—Ä–æ–∫: {res_idkt_save.shape[0]}")

    return res_idkt_save, idkt_nmid
