
from scripts.spreadsheet_tools.push_all_cabinet import push_concat_all_cabinet_stocks_to_sheets
from scripts.postprocessors.group_stocks import merge_and_transform_stocks_with_idkt
from scripts.utils.config.factory import sheets_names, get_requests_url_wb
from scripts.utils.request_block_nmId import get_block_nmId
from scripts.spreadsheet_tools.update_barcode_by_tables import update_barcode
from scripts.utils.telegram_logger import send_tg_message
from scripts.engine.run_cabinet import execute_run_cabinet
from scripts.utils.setup_logger import make_logger
from scripts.engine.universal_main import main
from functools import partial
from datetime import datetime
import pandas as pd
import asyncio
import aiohttp
import time


logger = make_logger(__name__, use_telegram=False)


async def get_stocks(session: aiohttp.ClientSession, name: str, api: str) -> pd.DataFrame:
    url = get_requests_url_wb()['supplier_stocks']

    headers = {"Authorization": api}
    # —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    params = {
        "dateFrom": "2024-01-01"  # datetime.now().strftime('%Y-%m-%d')
    }
    try:
        async with session.get(url, headers=headers, params=params) as response:
            logger.info(f"üöÄüöÄ  –ù–∞—á–∏–Ω–∞—é –∑–∞–ø—Ä–æ—Å –û–°–¢–ê–¢–ö–û–í –∫ –∫–∞–±–∏–Ω–µ—Ç—É {name}")

            if response.status != 200:
                raise ValueError(f"‚ö†Ô∏è‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ '–û–°–¢–ê–¢–ö–û–í': {await response.text()}")

            result = await response.json()

    except Exception as e:
        logger.error(f"‚ùå‚ùå  –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ: {e}")
        return pd.DataFrame(columns=['nmId', 'barcode'])
    else:
        if not result:
            logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API –¥–ª—è {name}")
            result_error = pd.DataFrame([{
                '–ê—Ä—Ç–∏–∫—É–ª WB': 0,
                '–°–ø—Ä–∞–≤–∫–∞': '–ø—É—Å—Ç–æ',
                '–ë—Ä–µ–Ω–¥': '–ø—É—Å—Ç–æ',
                '–†–∞–∑–º–µ—Ä': '–ø—É—Å—Ç–æ',
                '–ò—Ç–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∏': 0,
                '–ë–∞—Ä–∫–æ–¥': 0,
                '–¶–µ–Ω–∞': 0,
                '–°–∫–∏–¥–∫–∞': 0,
                '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞': 0,
            }])
            logger.warning(
                f"‚ö†Ô∏è –î–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ {name} —Å–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω –ø—É—Å—Ç–æ–≥–æ DataFrame –æ—Å—Ç–∞—Ç–∫–æ–≤ (stocks –ø—É—Å—Ç–æ–π)")

            return result_error
        data_stoks = pd.DataFrame(result)
    # 1. –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏

        data_stoks = data_stoks.rename(columns={
            'nmId': '–ê—Ä—Ç–∏–∫—É–ª WB',
            'lastChangeDate': '–°–ø—Ä–∞–≤–∫–∞',
            'brand': '–ë—Ä–µ–Ω–¥',
            'techSize': '–†–∞–∑–º–µ—Ä',
            'quantityFull': '–ò—Ç–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∏',
            'barcode': '–ë–∞—Ä–∫–æ–¥',
            'Price': '–¶–µ–Ω–∞',
            'Discount': '–°–∫–∏–¥–∫–∞',
            'supplierArticle': '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'})
        # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å–ø–∞—Ä–≤–∫–∞ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä 2025-01-01
        data_stoks['–°–ø—Ä–∞–≤–∫–∞'] = pd.to_datetime(
            data_stoks['–°–ø—Ä–∞–≤–∫–∞'], format='ISO8601').dt.date

        # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è
        df_sort = data_stoks.sort_values('–°–ø—Ä–∞–≤–∫–∞', ascending=False)

        # —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –∏ –ø–æ–¥—Å—Ç–∞–≤—è–µ–º —Ç—É–¥–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
        max_price = df_sort.loc[df_sort.groupby('–ê—Ä—Ç–∏–∫—É–ª WB',)[
            '–¶–µ–Ω–∞'].idxmax()]

        # —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –∏ –ø–æ–¥—Å—Ç–∞–≤—è–µ–º —Ç—É–¥–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —Å–∫–∏–¥–∫—É
        max_discount = df_sort.loc[df_sort.groupby('–ê—Ä—Ç–∏–∫—É–ª WB')[
            '–°–∫–∏–¥–∫–∞'].idxmax()]

        df_sort = df_sort.merge(
            max_price[[
                '–ê—Ä—Ç–∏–∫—É–ª WB', '–¶–µ–Ω–∞'
            ]].rename(columns={'–¶–µ–Ω–∞': '–ú–∞–∫—Å_—Ü–µ–Ω–∞'}),
            on='–ê—Ä—Ç–∏–∫—É–ª WB',
            how='left'

        ).merge(
            max_discount[[
                '–ê—Ä—Ç–∏–∫—É–ª WB', '–°–∫–∏–¥–∫–∞'
            ]].rename(columns={'–°–∫–∏–¥–∫–∞': '–ú–∞–∫—Å_—Å–∫–∏–¥–∫–∞'}),
            on='–ê—Ä—Ç–∏–∫—É–ª WB',
            how='left'
        )

        df_sort['–¶–µ–Ω–∞'] = df_sort['–ú–∞–∫—Å_—Ü–µ–Ω–∞']
        df_sort['–°–∫–∏–¥–∫–∞'] = df_sort['–ú–∞–∫—Å_—Å–∫–∏–¥–∫–∞']

        df_sort = df_sort.drop(['–ú–∞–∫—Å_—Ü–µ–Ω–∞', '–ú–∞–∫—Å_—Å–∫–∏–¥–∫–∞'], axis=1)

        logger.info(
            f"[‚úÖ –û—Å—Ç–∞—Ç–∫–∏ {name} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: {len(df_sort)} —Å—Ç—Ä–æ–∫")

        return df_sort


if __name__ == '__main__':
    # –∑–∞–ø—É—Å–∫
    # python -m scripts.pipelines.get_supplier_stocks

    send_tg_message(
        f"üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω 'get_stocks': {datetime.now():%Y-%m-%d %H:%M:%S}")

    begin = time.time()

    result_data = asyncio.run(main(
        run_funck=partial(execute_run_cabinet,
                          func_name='get_stocks'),
        postprocess_func=merge_and_transform_stocks_with_idkt,
        cache_name="test_cache.pkl"
    ))

    stocks_list = [stocks[0] for stocks in result_data.values()]

    article_seller = [barcode[1] for barcode in result_data.values()]

    logger.info(
        f"üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(stocks_list)} –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–æ–≤ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤")

    push_concat_all_cabinet_stocks_to_sheets(
        data=stocks_list,
        sheet_name=sheets_names()['group_stocks_and_idkt'],
        block_nmid=get_block_nmId()
    )

    logger.info(
        f"üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(article_seller)} –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–æ–≤ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –±–∞—Ä–∫–æ–¥–æ–≤")

    push_concat_all_cabinet_stocks_to_sheets(
        data=article_seller,
        sheet_name=sheets_names()['group_all_barcodes'],
        clear_range=['A:D']
    )

    update_barcode(
        data=result_data,

    )
    end = time.time()

    print(f"üòé –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {(end-begin)/60:,.2f}")
