from scripts.utils.config.factory import get_requests_url_oz, get_headers
from scripts.utils.setup_logger import make_logger
from dotenv import load_dotenv
import pandas as pd
import aiohttp

load_dotenv()


logger = make_logger(__name__, use_telegram=True)


async def get_product_info_attributes(api_key: str, client_id: str, name: str, sessions: aiohttp.ClientSession) -> list[dict[str, object]]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ –∏–∑ Ozon API (product_info_attributes).

    –î–µ–ª–∞–µ—Ç –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ API —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –≤–∏–¥–∏–º–æ—Å—Ç–∏ (ALL),
    —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞ (`last_id`).

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    ----------
    api_key : str
        –ö–ª—é—á API –æ—Ç Ozon (API key).
    client_id : str
        ID –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç Ozon.
    name : str
        –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è).
    sessions : aiohttp.ClientSession
        –°–µ—Å—Å–∏—è aiohttp –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    -----------
    list[dict[str, object]]
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–∞—Ö, –∫–∞–∂–¥—ã–π —Å–ª–æ–≤–∞—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–¥–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É.

    –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
    -----------
    Exception
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç API –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å, –æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç 200, —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–∑ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞.

    –ü—Ä–∏–º–µ—Ä:
    -------
        >>> async with aiohttp.ClientSession() as session:
        >>>  data = await get_product_info_attributes(api_key, client_id, "MyStore", session)
        >>> print(len(data))
    """

    url = get_requests_url_oz()['product_info_attributes']
    all_rows = []

    last_id = None
    limit = 1000

    while True:
        try:
            params = {
                "filter": {

                    "visibility": "ALL"
                },
                "limit": limit,
                'last_id': last_id,
                "sort_dir": "ASC"
            }

            logger.info(
                f"{name} - –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ Ozon API —Å last_id={last_id}")

            async with sessions.post(url, headers=get_headers(api_key=api_key, client_id=client_id), json=params) as response:
                if response.status != 200:
                    text = await response.text()
                    raise Exception(f"–û—à–∏–±–∫–∞ {response.status}: {text}")

                res = await response.json()

                items = res['result']
                logger.info(f"{name} - –ü–æ–ª—É—á–µ–Ω–æ: {len(items)} —Ç–æ–≤–∞—Ä–æ–≤")

                all_rows.extend(items)

                last_id = res.get('last_id')
                logger.info(f"{name} - –°–ª–µ–¥—É—é—â–∏–π last_id: {last_id}")

                if len(items) < limit:
                    logger.warning(
                        f"{name} - üö´ –ü–æ–ª—É—á–µ–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏.")
                    break

        except Exception as e:
            logger.error(f"{name} - üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    logger.info(
        f"{name} - ‚úÖ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫: {len(all_rows)}")

    return all_rows


def extract_sku(name: str, data_attributes: list[dict[str, object]]) -> list[int]:
    logger.info(
        f"{name} - –ò–∑–≤–ª–µ–∫–∞—é —Å–ø–∏—Å–æ–∫ SKU –∏–∑ {len(data_attributes)} –∫–∞—Ä—Ç–æ—á–µ–∫")

    skus = [item['sku'] for item in data_attributes if 'sku' in item]

    logger.info(f"{name} - –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(skus)} SKU")
    return skus


def read_product_info_json(name: str, data_attributes: list[dict[str, object]]) -> pd.DataFrame:

    all_data = []

    try:
        logger.info(
            f"{name} - –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É {len(data_attributes)} –∫–∞—Ä—Ç–æ—á–µ–∫")
        for item in data_attributes:
            info = {
                '–ë—Ä–µ–Ω–¥ –≤ –æ–¥–µ–∂–¥–µ –∏ –æ–±—É–≤–∏': None,
                '–û–±—ä–µ–¥–∏–Ω–∏—Ç—å –Ω–∞ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ': None,
                '–¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞': None,
                '–¢–∏–ø': None,
                '–ê—Ä—Ç–∏–∫—É–ª': item.get('offer_id'),
                '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞': item.get('name'),
                '–®—Ç—Ä–∏—Ö–∫–æ–¥': item.get('barcode'),
                '–®–∏—Ä–∏–Ω–∞ —É–ø–∞–∫–æ–≤–∫–∏, –º–º': item.get('width'),
                '–í—ã—Å–æ—Ç–∞ —É–ø–∞–∫–æ–≤–∫–∏, –º–º': item.get('height'),
                '–î–ª–∏–Ω–∞ —É–ø–∞–∫–æ–≤–∫–∏, –º–º': item.get('depth'),
                '–°—Å—ã–ª–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ': item.get('primary_image'),
                'sku': item.get('sku')

            }

            for attr in item.get('attributes', []):
                attr_id = attr.get('id')
                values = attr.get('values', [])

                if not values:
                    continue

                value = values[0].get('value')

                if attr_id == 31:
                    info['–ë—Ä–µ–Ω–¥ –≤ –æ–¥–µ–∂–¥–µ –∏ –æ–±—É–≤–∏'] = value
                elif attr_id == 8292:
                    info['–û–±—ä–µ–¥–∏–Ω–∏—Ç—å –Ω–∞ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ'] = value
                elif attr_id in (10096, 10097):
                    info['–¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞'] = value
                elif attr_id in (4501, 4503):
                    info['–¢–∏–ø'] = value

            all_data.append(info)

        df = pd.DataFrame(all_data)
        logger.info(
            f"{name} - ‚úÖ DataFrame —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")
        return df

    except Exception as e:
        logger.error(f"{name} - üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON: {e}")
        return pd.DataFrame()
