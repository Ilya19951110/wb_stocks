import psutil

import pandas as pd
import os
import asyncio
import aiohttp
import time
from scripts.utils.setup_logger import make_logger
from scripts.utils.telegram_logger import send_tg_message
from scripts.utils.config.factory import get_requests_url_oz
from dotenv import load_dotenv
from scripts.engine.main_ozon import main_run_ozon
from scripts.engine.run_cabinet_oz import execute_run_ozon
import io
from scripts.utils.config.factory import get_headers
from scripts.spreadsheet_tools.upload_oz_matrix_gsheet import upload_oz_stocks_oz_matrix
from scripts.utils.config.factory import get_all_api_ozon
load_dotenv()

logger = make_logger(__name__, use_telegram=True)


# def get_memory_usage_mb() -> float:
#     """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–∞–º—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö"""
#     process = psutil.Process(os.getpid())
#     mem_bytes = process.memory_info().rss  # Resident Set Size (RSS)
#     return mem_bytes / (1024 ** 2)


# async def get_report_products_create(api_key: str, client_id: str, name: str, sessions: aiohttp.ClientSession) -> str:

#     try:
#         logger.info('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ SELLER_PRODUCTS')
#         url = get_requests_url_oz()['product_create']

#         page = 1

#         params = {
#             'page': page,
#             'page_size': 1000,
#             'report_type': 'SELLER_PRODUCTS',
#         }

#         async with sessions.post(url, headers=get_headers(api_key=api_key, client_id=client_id), json=params) as response:

#             if response.status != 200:
#                 logger.error(
#                     f'–ö–ê–ë–ò–ù–ï–¢ {name} - ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {await response.text()}')
#                 raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç")

#             result = await response.json()
#             logger.info(
#                 f"–ö–ê–ë–ò–ù–ï–¢ {name} - ‚úÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω, –∫–æ–¥: {result['result']['code']}")

#         return result['result']['code']

#     except Exception:
#         logger.exception(
#             f'–ö–ê–ë–ò–ù–ï–¢ {name} - üí• –û—à–∏–±–∫–∞ –≤ get_report_products_create')
#         raise


# async def get_report_info(api_key: str, client_id: str, code: str, name: str, sessions: aiohttp.ClientSession, max_retries: int = 20, delay: int = 10,) -> str:
#     """
#     –ñ–¥—ë—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞ Ozon –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª, –∫–æ–≥–¥–∞ –æ–Ω –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.

#     Args:
#         code: –∫–æ–¥ –æ—Ç—á–µ—Ç–∞
#         max_retries: —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø—Ä–æ–±–æ–≤–∞—Ç—å
#         delay: –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (—Å–µ–∫)

#     Returns:
#         str: —Å—Å—ã–ª–∫–∞ –Ω–∞ CSV-—Ñ–∞–π–ª
#     """
#     url = get_requests_url_oz()['report_info']

#     for attempt in range(1, max_retries + 1):

#         try:
#             logger.info(
#                 f"‚è≥ [{attempt}] –ü—Ä–æ–≤–µ—Ä—è—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ—Ç—á–µ—Ç–∞ —Å –∫–æ–¥–æ–º {code}")

#             async with sessions.post(url, headers=get_headers(api_key=api_key, client_id=client_id), json={'code': code}) as response:

#                 response.raise_for_status()

#                 result = await response.json()
#                 status = result['result'].get('status', '')

#                 if status == 'success':
#                     logger.warning(
#                         f"‚úÖ [{attempt}] –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤! –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª.")

#                     return result['result']['file']

#                 elif status == 'failed':
#                     logger.error(
#                         f"–ö–ê–ë–ò–ù–ï–¢ {name} - ‚ùå –û—Ç—á–µ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–µ–π. –ö–æ–¥: {code}")
#                     raise RuntimeError("–û—Ç—á–µ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")

#                 logger.warning(
#                     f"–ö–ê–ë–ò–ù–ï–¢ {name} - ‚åõ [{attempt}] –û—Ç—á–µ—Ç –≤ —Å—Ç–∞—Ç—É—Å–µ: {status}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay} —Å–µ–∫.")
#                 await asyncio.sleep(delay)

#         except Exception:
#             logger.exception(
#                 f"–ö–ê–ë–ò–ù–ï–¢ {name} - üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—ã—Ç–∫–∞ {attempt}")
#             await asyncio.sleep(delay)

#     raise TimeoutError(f"–ö–ê–ë–ò–ù–ï–¢ {name} - ‚õî –û—Ç—á–µ—Ç –Ω–µ –±—ã–ª –≥–æ—Ç–æ–≤ –≤–æ–≤—Ä–µ–º—è")


# async def get_csv_report(file: str, name: str, sessions: aiohttp.ClientSession) -> tuple[pd.DataFrame, pd.Series]:

#     try:
#         logger.info(f"–ö–ê–ë–ò–ù–ï–¢ {name} - üì• –ó–∞–≥—Ä—É–∂–∞—é CSV-–æ—Ç—á–µ—Ç –∏–∑ URL: {file}")

#         async with sessions.get(file) as response:

#             response.raise_for_status()

#             content = await response.read()
#             buffer = io.BytesIO(content)

#             logger.info(
#                 f"–ö–ê–ë–ò–ù–ï–¢ {name} - üì¶ –ü–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π CSV: {get_memory_usage_mb():.2f} MB")

#             df_info = pd.read_csv(buffer, sep=';', encoding='utf-8')

#             try:

#                 logger.warning('—Å–æ—Ö—Ä–∞–Ω—è—é sku –≤ xl')

#                 df_info.to_excel(
#                     r"C:\Users\Ilya\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\skuV2.xlsx",
#                     index=False,
#                     engine='openpyxl',
#                     sheet_name='SKU_test'
#                 )
#                 logger.warning('sku –≤ xl +++')
#             except Exception:
#                 logger.exception(f'–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–Ω–∏—è –≤ xl {name}')

#             logger.info(
#                 f"–ö–ê–ë–ò–ù–ï–¢ {name} - ‚úÖ CSV —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω, —Å—Ç—Ä–æ–∫: {df_info.shape[0]}")
#             logger.warning(
#                 f"–ö–ê–ë–ò–ù–ï–¢ {name} - üì¶ –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ CSV: {get_memory_usage_mb():.2f} MB")

#             sku = df_info['SKU']
#         return df_info, sku

#     except Exception:
#         logger.exception(
#             f"–ö–ê–ë–ò–ù–ï–¢ {name} - üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–ª–∏ —á—Ç–µ–Ω–∏–∏ CSV-—Ñ–∞–π–ª–∞")
#         raise


async def get_product_list_stocks(api_key: str, client_id: str, sku: list[int], name: str, sessions: aiohttp.ClientSession) -> pd.DataFrame:
    all_stocks = []

    url = get_requests_url_oz()['analytics_stocks']

    chunk = 100

    for i in range(0, len(sku), chunk):

        try:
            logger.info(
                f"–ö–ê–ë–ò–ù–ï–¢ {name} üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ {len(sku)} SKU")
            chunk_size = sku[i:i+chunk]

            params = {

                'skus': list(map(str, chunk_size))
            }
            async with sessions.post(url, headers=get_headers(client_id=client_id, api_key=api_key), json=params) as response:

                if response.status != 200:
                    logger.error(
                        f"–ö–ê–ë–ò–ù–ï–¢ {name} ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {url}: {response.status} ‚Äî {await response.text()}")

                result = await response.json()

                all_stocks.extend(result['items'])
                logger.info(
                    f"–ö–ê–ë–ò–ù–ï–¢ {name} üìä –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º: {len(all_stocks)} –∑–∞–ø–∏—Å–µ–π")

                await asyncio.sleep(3)

        except Exception:
            logger.exception(
                f"–ö–ê–ë–ò–ù–ï–¢ {name} üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ SKU {i+1}‚Äì{i+len(chunk_size)}")

    logger.info(
        f"–ö–ê–ë–ò–ù–ï–¢ {name} ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –≤—Å–µ–≥–æ: {len(all_stocks)} –∑–∞–ø–∏—Å–µ–π –ø–æ —Å–∫–ª–∞–¥–∞–º")

    return pd.DataFrame(all_stocks)

if __name__ == '__main__':
    start = time.perf_counter()
    send_tg_message("üöÄ –°—Ç–∞—Ä—Ç —Å–∫—Ä–∏–ø—Ç–∞ 'get_skus_ozon'")
    # python -m scripts.pipelines_oz.get_stocks_oz

    data_stocks = asyncio.run(main_run_ozon(
        run_func=execute_run_ozon,
        cabinet_oz=get_all_api_ozon()

    ))

    upload_oz_stocks_oz_matrix(data=data_stocks)
    end = time.perf_counter()
    logger.warning(f" –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {(end-start)/60:,.2f} –º–∏–Ω.")
