from scripts.utils.telegram_logger import send_tg_message
from scripts.utils.setup_logger import make_logger
import pandas as pd

logger = make_logger(__name__, use_telegram=False)


def merge_and_transform_stocks_with_idkt(stocks: pd.DataFrame, IDKT: pd.DataFrame, name: str) -> tuple[pd.DataFrame, pd.DataFrame]:
  

    stocks['–î–∞—Ç–∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è'] = pd.to_datetime(
            stocks['–î–∞—Ç–∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è'],  errors='coerce').dt.date

    logger.info(stocks['–î–∞—Ç–∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è'])
        # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è
    df_sort = stocks.sort_values('–î–∞—Ç–∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è', ascending=False)

        # —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –∏ –ø–æ–¥—Å—Ç–∞–≤—è–µ–º —Ç—É–¥–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
    last_date = stocks.groupby('–ê—Ä—Ç–∏–∫—É–ª WB')[
            '–î–∞—Ç–∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è'].transform('max')
        
    latest_rows = stocks[stocks['–î–∞—Ç–∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è'] == last_date]

       
    max_price = (
            latest_rows
            .groupby('–ê—Ä—Ç–∏–∫—É–ª WB', as_index=False)['–¶–µ–Ω–∞']
            .max()
            .rename(columns={'–¶–µ–Ω–∞': '–ú–∞–∫—Å_—Ü–µ–Ω–∞'})
        )

    max_discount = (
            latest_rows
            .groupby('–ê—Ä—Ç–∏–∫—É–ª WB', as_index=False)['–°–∫–∏–¥–∫–∞']
            .max()
            .rename(columns={'–°–∫–∏–¥–∫–∞': '–ú–∞–∫—Å_—Å–∫–∏–¥–∫–∞'})
        )
    df_sort = (
            df_sort
            .merge(max_price, on='–ê—Ä—Ç–∏–∫—É–ª WB', how='left')
            .merge(max_discount, on='–ê—Ä—Ç–∏–∫—É–ª WB', how='left')
        )

    df_sort['–¶–µ–Ω–∞'] = df_sort['–ú–∞–∫—Å_—Ü–µ–Ω–∞']
    df_sort['–°–∫–∏–¥–∫–∞'] = df_sort['–ú–∞–∫—Å_—Å–∫–∏–¥–∫–∞']
    df_sort = df_sort.drop(['–ú–∞–∫—Å_—Ü–µ–Ω–∞', '–ú–∞–∫—Å_—Å–∫–∏–¥–∫–∞',], axis=1)

    if name not in ('–ú–∏—à–Ω–µ–≤–∞', '–®–µ–ª—É–¥—å–∫–æ'):
        logger.warning(f"{name} –∑–∞—à–ª–∏ –≤ –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è last_date")
        df_sort['–î–∞—Ç–∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è'] = last_date

    try:
        logger.info(
            "üìä –ü—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö [–ê—Ä—Ç–∏–∫—É–ª WB, –ë–∞—Ä–∫–æ–¥, –†–∞–∑–º–µ—Ä, ID KT]...")

        type_map = {
            '–ê—Ä—Ç–∏–∫—É–ª WB': int,
            '–ë–∞—Ä–∫–æ–¥': str,
            '–†–∞–∑–º–µ—Ä': str
        }
        for df in [stocks, IDKT]:
            for col, dtype in type_map.items():
                df[col] = df[col].astype(dtype)

        IDKT['ID KT'] = IDKT['ID KT'].astype(int)

        logger.info("‚úÖ –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã!")
    except Exception as e:
        msg = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤–µ—Å—Ç–∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö {name}: {e}"
        send_tg_message(msg)
        logger.error(msg)
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–≤–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Å—Ç–∞—Ç–∫–∏ —Ü–µ–ø–ª—è–µ–º –∫ idkt
    try:
        logger.info("üîó –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü (merge)...")

        result = pd.merge(
            IDKT,
            stocks,
            on=['–ê—Ä—Ç–∏–∫—É–ª WB', '–ë–∞—Ä–∫–æ–¥'],
            how='outer',
            indicator=True,
            suffixes=('_IDKT', '_stocks')
        )
        logger.info("‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        msg = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã: {e}"
        send_tg_message(msg)
        logger.error(msg)

    try:
        logger.info("üßπ –ù–∞—á–∏–Ω–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö...")
        # –£–¥–∞–ª—è–µ–º –Ω–µ –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        result = result.drop(columns=[col for col in result.columns if col.endswith('_stocks')]+['warehouseName',
                                                                                                 'inWayToClient', 'inWayFromClient',
                                                                                                 'category', 'subject', 'isRealization', 'SCCode', 'isSupply'], errors='ignore')

        # —É–¥–∞–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å—ã _IDKT —É —Å—Ç–æ–ª–±—Ü–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–ª–∏—Å—å
        result.columns = [
            col.replace('_IDKT', '') for col in result.columns
        ]

        # –≤—ã–±–∏—Ä–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã
        num_col = ['–¶–µ–Ω–∞', '–°–∫–∏–¥–∫–∞',
                   '–ò—Ç–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∏', '–®–∏—Ä–∏–Ω–∞', '–í—ã—Å–æ—Ç–∞', '–î–ª–∏–Ω–∞', 'quantity']
        string_cols = ['–ë—Ä–µ–Ω–¥', '–†–∞–∑–º–µ—Ä', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ',
                       ]

        # –ó–∞–ø–æ–ª–Ω—è–µ–º NAN –≤ –¶–µ–Ω–∞ –∏ –°–∫–∏–¥–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –∑–Ω–∞—á –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞
        result['–î–∞—Ç–∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è'] = result['–î–∞—Ç–∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è'].astype(str)

        result[['–¶–µ–Ω–∞', '–°–∫–∏–¥–∫–∞']] = result.groupby(
            '–ê—Ä—Ç–∏–∫—É–ª WB')[['–¶–µ–Ω–∞', '–°–∫–∏–¥–∫–∞']].ffill()
        # –∑–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç–æ—Ç—ã –Ω—É–∂–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        result[num_col] = result[num_col].fillna(0)
        result[string_cols] = result[string_cols].fillna('-')

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ stocks –æ—Å—Ç–∞—Ç–∫–∏
        right_only_rows = result[result['_merge'] == 'right_only']

        # –≤ –æ—Å–Ω–æ–Ω–æ–º –¥—Ñ —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∞–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ, –æ–Ω–∏ –∫–æ—Å—è—á–Ω—ã–µ
        result = result[result['_merge'] != 'right_only']

        # —É–¥–∞–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü _merge
        result = result.drop(columns='_merge')

        # –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–æ–ª–±—Ü—É –∏—Ç–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∏
        logger.debug('–ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ò—Ç–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∏')
        result = result.groupby([
            col for col in result.columns if col != '–ò—Ç–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∏' and col !='quantity'
        ]).agg({
            'quantity': 'sum',
            '–ò—Ç–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∏':'sum'
        }).reset_index()

        logger.debug(result.columns.tolist())
        logger.info(result.head(5))
        # ['–ò—Ç–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∏'].sum().reset_index()
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –¶–µ–Ω–∞ –¥–æ –°–ü–ü
        result['–¶–µ–Ω–∞ –¥–æ –°–ü–ü'] = result['–¶–µ–Ω–∞'] * \
            (1 - result['–°–∫–∏–¥–∫–∞']/100)

        # –¥—Ñ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º –∏ –±–∞—Ä–∫–æ–¥–æ–º

        seller_article = result.filter([
            '–ê—Ä—Ç–∏–∫—É–ª WB', '–ë–∞—Ä–∫–æ–¥', '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞', '–†–∞–∑–º–µ—Ä'
        ])

        # result = result.drop(columns=[
        #     '–ë–∞—Ä–∫–æ–¥', '–†–∞–∑–º–µ—Ä'
        # ])

        result[['–¶–µ–Ω–∞', '–°–∫–∏–¥–∫–∞', '–¶–µ–Ω–∞ –¥–æ –°–ü–ü']] = result.groupby(
            '–ê—Ä—Ç–∏–∫—É–ª WB')[['–¶–µ–Ω–∞', '–°–∫–∏–¥–∫–∞', '–¶–µ–Ω–∞ –¥–æ –°–ü–ü']].transform('first')

        # –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ —Å—É–º–º–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
        result = result.groupby([
            col for col in result.columns if col != '–ò—Ç–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∏'
        ])['–ò—Ç–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∏'].sum().reset_index()

        result['–ö–∞–±–∏–Ω–µ—Ç'] = name
        
        new_order = [
            '–ê—Ä—Ç–∏–∫—É–ª WB', 'ID KT', '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞', '–ë—Ä–µ–Ω–¥', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
            '–ò—Ç–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∏', '–¶–µ–Ω–∞', '–°–∫–∏–¥–∫–∞', '–¶–µ–Ω–∞ –¥–æ –°–ü–ü', '–§–æ—Ç–æ', '–®–∏—Ä–∏–Ω–∞', '–í—ã—Å–æ—Ç–∞', '–î–ª–∏–Ω–∞', '–ö–∞–±–∏–Ω–µ—Ç', '–ë–∞—Ä–∫–æ–¥', '–†–∞–∑–º–µ—Ä', '–î–∞—Ç–∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è', 'quantity'
        ]

        # –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        result = result[new_order].rename(columns={'quantity': '–û—Å—Ç–∞—Ç–∫–∏'})
      

        result = result.sort_values('–ò—Ç–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∏', ascending=False)
        

        if len(right_only_rows) > 0:
            logger.warning(
                f"–∫–æ—Å—è—á–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∫–∞–±–∏–Ω–µ—Ç–∞ {name} =  {right_only_rows.shape}\n{right_only_rows['–ê—Ä—Ç–∏–∫—É–ª WB'].to_list()}")

        else:
            logger.info(f"‚úÖ –ö–æ—Å—è—á–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ {name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        logger.warning(
            f"üü¢ –ï—Å—Ç—å –ª–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ {name}?: {result.duplicated().any()}\n"
            f"üì¶ –ö–æ–ª–æ–Ω–∫–∏ barcode_nmid: {seller_article.columns.tolist()}"
        )

    except Exception as e:
        msg = f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"
        send_tg_message(msg)
        logger.error(msg)

    logger.debug(f"\n{name} -> {result.columns.tolist()}")
    if name in ('–ú–∏—à–Ω–µ–≤–∞', '–®–µ–ª—É–¥—å–∫–æ'):
        result = result.drop(columns=['–î–∞—Ç–∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è', '–û—Å—Ç–∞—Ç–∫–∏',  '–ë–∞—Ä–∫–æ–¥', '–†–∞–∑–º–µ—Ä'])

    return result, seller_article
