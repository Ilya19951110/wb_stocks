from scripts.gspread_client import get_gspread_client
from collections import defaultdict
import gspread
from gspread.exceptions import WorksheetNotFound, APIError
import pandas as pd
from scripts.setup_logger import make_logger
from scripts.telegram_logger import TelegramHandler

logger = make_logger(__name__, use_telegram=True)


def save_in_google_sheet(dict_data):
    """–í—ã–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ dict_data –≤ Google Sheets –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ª–∏—Å—Ç–∞–º."""
    # —Å–µ—Ä–≤–∏—Å –∞–∫–∫–∞—É–Ω—Ç –≥—É–≥–ª
    gc = get_gspread_client()
    # –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—É
    spreadsheet = gc.open('–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞. –ü–æ–ª–Ω–∞—è')

    def get_block_nmid():
        """–°—á–∏—Ç—ã–≤–∞–µ—Ç –∏–∑ –ª–∏—Å—Ç–∞ '–ë–õ–û–ö' –Ω–∞–±–æ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö NMID."""
        try:
            worksheet_block = None

            try:
                logger.info('üü¢ –ø–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ worksheet_block')

                worksheet_block = spreadsheet.worksheet('–ë–õ–û–ö')

            except WorksheetNotFound as e:
                logger.error(f"‚ùå‚ùå [–û–®–ò–ë–ö–ê] –õ–∏—Å—Ç –ë–õ–û–ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")

            except APIError as e:
                logger.error(
                    f"‚ùå‚ùå [–û–®–ò–ë–ö–ê] –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –ª–∏—Å—Ç—É –ë–õ–û–ö: {e}")

            except Exception as e:
                logger.error(
                    f"‚ùå‚ùå [–ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê] –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ª–∏—Å—Ç–æ–º –ë–õ–û–ö: {e}")

            # –ï—Å–ª–∏ worksheet_block == True, —Ç–æ –µ—Å—Ç—å != "", None or 0
            if worksheet_block:
                try:
                    logger.info(
                        "üü¢ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö nmid –∏–∑ –ª–∏—Å—Ç–∞ '–ë–õ–û–ö'")

                    block = set([
                        int(row[1])
                        for row in worksheet_block.get_all_values()[1:]
                        if row[0].strip().isdigit() and int(row[0]) == 0
                    ])

                    logger.info(
                        f"üü¢ –ü–æ–ª—É—á–µ–Ω–æ {len(block)} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö nmid ‚úÖ")
                    return block

                except Exception as e:
                    logger.error(
                        f"‚ùå‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ '–ë–õ–û–ö': {e}")
                    return set()

            else:
                logger.error(
                    "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ª–∏—Å—Ç '–ë–õ–û–ö' –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                return set()

        except Exception as e:
            logger.error(f"–ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ block_nmid: {e} ‚ùå‚ùå")
            return set()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ª–∏—Å—Ç–∞

    def loading_all_cabinets(data, block):
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ df_tuple[0], —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∏ –ø–∏—à–µ—Ç –≤ –ª–∏—Å—Ç 'API'.

        df_tuple[0] - –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∞—Ç–∞ —Ñ—Ä–µ–π–º —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –∏ idkt

        """

        all_cabinet = pd.DataFrame()

        try:
            logger.info("üü¢ –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –ª–∏—Å—Ç—É 'API'")
            worksheet_idkt = spreadsheet.worksheet('API')

        except (WorksheetNotFound, APIError) as e:
            logger.error(
                f"‚ùå{type(e).__name__} –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –ª–∏—Å—Ç—É 'API WB barcode' –≤ —Ç–∞–±–ª–∏—Ü–µ {worksheet_idkt}: {e}"
            )
        except Exception as e:
            logger.error(f"‚ùå‚ùå –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ª–∏—Å—Ç–æ–º API: {e}")
            return

        if worksheet_idkt:
            try:
                logger.info(
                    'üü¢ –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–∞–±–∏–Ω–µ—Ç—ã (df[0]) –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —É—Å–ª–æ–≤–∏—é')

                all_cabinet = pd.concat([
                    df_tuple[0]
                    for df_tuple in data.values()
                ], ignore_index=True)

                all_cabinet = all_cabinet[~all_cabinet['–ê—Ä—Ç–∏–∫—É–ª WB'].isin(
                    block)]

                if all_cabinet.empty:
                    logger.warning(
                        "‚ùå‚ùå‚ö†Ô∏è DataFrame all_cabinet –ø—É—Å—Ç ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–∞ –≤—ã–≥—Ä—É–∑–∫–∞.")
                else:
                    worksheet_idkt.clear()

                    worksheet_idkt.update(
                        [all_cabinet.columns.values.tolist()] +
                        all_cabinet.values.tolist()
                    )

                    logger.info(
                        'üü¢ –í all_cards –≤ –ª–∏—Å—Ç API üöÄ ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—à–ª–∞ –±—ã—Å—Ç—Ä–æ –∏ –º–æ—â–Ω–æ ‚úÖ'
                    )

            except Exception as e:
                logger.error(
                    f"‚ùå‚ùå‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ –≤—ã–≥—Ä—É–∑–∫–µ all_cabinet –≤ –ª–∏—Å—Ç API: {e}"
                )
        else:
            logger.warning(
                "‚ùå‚ùå‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –≤—ã–≥—Ä—É–∑–∫–∞ all_cabinet: –ª–∏—Å—Ç 'API' –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")

    def load_all_barcode(data_barcode):
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ df_tuple[1] –∏ –ø–∏—à–µ—Ç –≤ –ª–∏—Å—Ç 'API 2'.

        df_tuple[1] - —ç—Ç–æ –¥—Ñ —Å–æ –≤—Å–µ–º–∏ –±–∞—Ä–∫–æ–¥–∞–º–∏ –≤—Å–µ—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤
        """

        try:
            worksheet_barcode = spreadsheet.worksheet('API 2')

        except (WorksheetNotFound, APIError) as e:
            logger.error(
                f"‚ùå {type(e).__name__} –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –ª–∏—Å—Ç—É 'API WB barcode' –≤ —Ç–∞–±–ª–∏—Ü–µ {worksheet_barcode}: {e}")
        except Exception as e:
            logger.error(
                f"‚ùå‚ùå‚ö†Ô∏è [–ù–ï–ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê] –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ª–∏—Å—Ç–æ–º 'API 2': {e}")

        if worksheet_barcode:
            logger.info('üü¢ –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –±–∞—Ä–∫–æ–¥–∞ (df_tuple[1]) –∏–∑ dick_data"')
            # –≤—ã–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –±–∞—Ä–∫–æ–¥–∞
            barcode = pd.concat([
                df_tuple[1] for df_tuple in data_barcode.values()
            ], ignore_index=True)

            logger.info(f" üü¢ –í—Å–µ–≥–æ –±–∞—Ä–∫–æ–¥–æ–≤ {len(barcode)} üì§")

            worksheet_barcode.clear()

            worksheet_barcode.update([
                barcode.columns.values.tolist()] + barcode.values.tolist()
            )

            logger.info(
                f"üì§ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –ª–∏—Å—Ç 'API 2': {barcode.shape[0]} —Å—Ç—Ä–æ–∫")

        else:
            logger.error(
                "‚ùå‚ùå‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –≤—ã–≥—Ä—É–∑–∫–∞ barcode: –ª–∏—Å—Ç 'API 2' –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")

    def group_by_sheet(data):
        """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç barcode –ø–æ –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–¥–∞–Ω–Ω—ã–º –≥—Ä—É–ø–ø–∞–º."""

        GROUP_MAP = {
            '–§–∏–Ω –º–æ–¥–µ–ª—å –ò–æ—Å–∏—Ñ–æ–≤—ã –† –ê –ú': ['–ê–∑–∞—Ä—å—è', '–†–∞—Ö–µ–ª—å', '–ú–∏—Ö–∞–∏–ª'],
            '–§–∏–Ω –º–æ–¥–µ–ª—å –ì–∞–ª–∏–ª–æ–≤–∞': ['–ì–∞–ª–∏–ª–æ–≤–∞'],
            '–§–∏–Ω –º–æ–¥–µ–ª—å –ú–∞—Ä—Ç—ã–Ω–µ–Ω–∫–æ': ['–ú–∞—Ä—Ç—ã–Ω–µ–Ω–∫–æ', '–¢–æ—Ä–≥–º–∞–∫—Å–∏–º—É–º']
        }
        grouped_df = defaultdict(pd.DataFrame)

        for name, (_, bcode) in data.items():
            for sheet, people in GROUP_MAP.items():
                if name in people:
                    grouped_df[sheet] = pd.concat(
                        [grouped_df[sheet], bcode], ignore_index=True)

        logger.info("üìä –î–∞–Ω–Ω—ã–µ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã! –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üõ†Ô∏è üòéüòé")
        return grouped_df

    def update_sheet(b_data):
        """–î–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–≤–æ—é —Ç–∞–±–ª–∏—Ü—É –∏ –ø–∏—à–µ—Ç barcode."""

        # –∑–∞–≥—Ä—É–∑–∫–∞ –±–∞—Ä–∫–æ–¥–æ–≤ –ø–æ –∫–∞–±–∏–Ω–µ—Ç–∞–º
        for sheets, df in b_data.items():
            try:
                logger.info(f"üü¢ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É {sheets}")
                sh = gc.open(sheets)
                wks = None
                try:
                    wks = sh.worksheet('API WB barcode')
                except (WorksheetNotFound, APIError) as e:
                    logger.error(
                        f"‚ùå {type(e).__name__} –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –ª–∏—Å—Ç—É 'API WB barcode' –≤ —Ç–∞–±–ª–∏—Ü–µ {sheets}: {e}")
                except Exception as e:
                    logger.error(
                        f"‚ùå‚ùå‚ö†Ô∏è –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ª–∏—Å—Ç–æ–º 'API WB barcode' –≤ —Ç–∞–±–ª–∏—Ü–µ {sheets}: {e}")

                if wks:
                    try:
                        if df.empty:
                            logger.warning(
                                f"‚ùå‚ùå‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: DataFrame –¥–ª—è '{sheets}' –ø—É—Å—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–≥—Ä—É–∑–∫—É.")
                            continue

                        wks.clear()
                        wks.update([df.columns.values.tolist()] +
                                   df.values.tolist())

                        logger.info(
                            f'üü¢ –ë–∞—Ä–∫–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É {sheets}\n–î–ª–∏–Ω–∞: {df.shape} ü´°')

                    except Exception as e:
                        logger.error(
                            f" ‚ùå‚ùå‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ '{sheets}': {e}")
                else:
                    logger.error(
                        f"‚ùå‚ùå‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –≤—ã–≥—Ä—É–∂–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É {sheets}: –ª–∏—Å—Ç –Ω–µ–¥–æ—Ç—É–ø–µ–Ω")

            except Exception as e:
                logger.error('‚ùå‚ùå‚ö†Ô∏è',
                             f"–≤ —Ç–∞–±–ª–∏—Ü–µ '{sheets}': {e}\n –¥–∞–Ω–Ω—ã–µ –Ω–µ –≤—ã–≥—Ä—É–∂–µ–Ω—ã", sep='\n')

    block = get_block_nmid()
    loading_all_cabinets(data=dict_data, block=block)
    load_all_barcode(data_barcode=dict_data)
    grouped_data = group_by_sheet(data=dict_data)
    update_sheet(grouped_data)
